-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXI_DMA_SLAVE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TLAST : IN STD_LOGIC;
    out_stream_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_V_V_full_n : IN STD_LOGIC;
    out_stream_V_V_write : OUT STD_LOGIC );
end;


architecture behav of AXI_DMA_SLAVE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_stream_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_data_V_0_vld_in : STD_LOGIC;
    signal in_stream_V_data_V_0_vld_out : STD_LOGIC;
    signal in_stream_V_data_V_0_ack_in : STD_LOGIC;
    signal in_stream_V_data_V_0_ack_out : STD_LOGIC;
    signal in_stream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_V_data_V_0_sel : STD_LOGIC;
    signal in_stream_V_data_V_0_load_A : STD_LOGIC;
    signal in_stream_V_data_V_0_load_B : STD_LOGIC;
    signal in_stream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream_V_last_0_vld_in : STD_LOGIC;
    signal in_stream_V_last_0_ack_out : STD_LOGIC;
    signal in_stream_V_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond6_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal exitcond6_reg_216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_reg_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_65 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_s_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_150 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_data_V_2_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_data_V_3_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal tmp_data_V_4_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal tmp_data_V_5_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal tmp3_fu_103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal tmp4_fu_107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal IFM_bound_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal IFM_bound_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_11_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_block_state7 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state14);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_stream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_V_data_V_0_ack_out = ap_const_logic_1) and (in_stream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_V_data_V_0_sel_rd <= not(in_stream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_stream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_V_data_V_0_ack_in = ap_const_logic_1) and (in_stream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_V_data_V_0_sel_wr <= not(in_stream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_stream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_V_data_V_0_state = ap_const_lv2_2) and (in_stream_V_data_V_0_vld_in = ap_const_logic_0)) or ((in_stream_V_data_V_0_state = ap_const_lv2_3) and (in_stream_V_data_V_0_vld_in = ap_const_logic_0) and (in_stream_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_V_data_V_0_state = ap_const_lv2_1) and (in_stream_V_data_V_0_ack_out = ap_const_logic_0)) or ((in_stream_V_data_V_0_state = ap_const_lv2_3) and (in_stream_V_data_V_0_ack_out = ap_const_logic_0) and (in_stream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_V_data_V_0_vld_in = ap_const_logic_0) and (in_stream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_V_data_V_0_ack_out = ap_const_logic_0) and (in_stream_V_data_V_0_vld_in = ap_const_logic_1))) and (in_stream_V_data_V_0_state = ap_const_lv2_3)) or ((in_stream_V_data_V_0_state = ap_const_lv2_1) and (in_stream_V_data_V_0_ack_out = ap_const_logic_1)) or ((in_stream_V_data_V_0_state = ap_const_lv2_2) and (in_stream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_stream_V_last_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_V_last_0_state = ap_const_lv2_2) and (in_stream_V_last_0_vld_in = ap_const_logic_0)) or ((in_stream_V_last_0_state = ap_const_lv2_3) and (in_stream_V_last_0_vld_in = ap_const_logic_0) and (in_stream_V_last_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_V_last_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_V_last_0_state = ap_const_lv2_1) and (in_stream_V_last_0_ack_out = ap_const_logic_0)) or ((in_stream_V_last_0_state = ap_const_lv2_3) and (in_stream_V_last_0_ack_out = ap_const_logic_0) and (in_stream_V_last_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_last_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_V_last_0_vld_in = ap_const_logic_0) and (in_stream_V_last_0_ack_out = ap_const_logic_1))) and not(((in_stream_V_last_0_ack_out = ap_const_logic_0) and (in_stream_V_last_0_vld_in = ap_const_logic_1))) and (in_stream_V_last_0_state = ap_const_lv2_3)) or ((in_stream_V_last_0_state = ap_const_lv2_1) and (in_stream_V_last_0_ack_out = ap_const_logic_1)) or ((in_stream_V_last_0_state = ap_const_lv2_2) and (in_stream_V_last_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_last_0_state <= ap_const_lv2_3;
                else 
                    in_stream_V_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_124_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i1_reg_65 <= i_1_fu_129_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i1_reg_65 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_139_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_reg_76 <= i_11_fu_144_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_reg_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                IFM_bound_reg_211 <= IFM_bound_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                KER_bound_reg_197 <= KER_bound_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond6_reg_216 <= exitcond6_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_202 <= exitcond_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_data_V_0_load_A = ap_const_logic_1)) then
                in_stream_V_data_V_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_data_V_0_load_B = ap_const_logic_1)) then
                in_stream_V_data_V_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_fu_124_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_92 <= in_stream_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (tmp_s_reg_150 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp1_reg_187 <= tmp1_fu_111_p2;
                tmp2_reg_192 <= tmp2_fu_116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (tmp_s_reg_150 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp3_reg_177 <= tmp3_fu_103_p2;
                tmp4_reg_182 <= tmp4_fu_107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_data_V_2_reg_154 <= in_stream_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_data_V_3_reg_160 <= in_stream_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_data_V_4_reg_166 <= in_stream_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_data_V_5_reg_172 <= in_stream_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_s_reg_150 <= tmp_s_fu_97_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_enable_reg_pp1_iter0, exitcond6_fu_139_p2, ap_enable_reg_pp0_iter0, exitcond_fu_124_p2, tmp_s_reg_150, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (tmp_s_reg_150 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif ((not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (tmp_s_reg_150 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_fu_124_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_fu_124_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((exitcond6_fu_139_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((exitcond6_fu_139_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    IFM_bound_fu_135_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp2_reg_192) * signed(tmp1_reg_187))), 32));
    KER_bound_fu_120_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_reg_182) * signed(tmp3_reg_177))), 32));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_enable_reg_pp0_iter0, exitcond_fu_124_p2, ap_enable_reg_pp0_iter1, exitcond_reg_202)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_reg_202 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_fu_124_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_enable_reg_pp0_iter0, exitcond_fu_124_p2, ap_enable_reg_pp0_iter1, exitcond_reg_202)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_reg_202 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_fu_124_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_enable_reg_pp0_iter0, exitcond_fu_124_p2, ap_enable_reg_pp0_iter1, exitcond_reg_202)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_reg_202 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_fu_124_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_enable_reg_pp1_iter0, exitcond6_fu_139_p2, ap_enable_reg_pp1_iter1, exitcond6_reg_216)
    begin
                ap_block_pp1_stage0_01001 <= (((exitcond6_reg_216 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_enable_reg_pp1_iter0, exitcond6_fu_139_p2, ap_enable_reg_pp1_iter1, exitcond6_reg_216)
    begin
                ap_block_pp1_stage0_11001 <= (((exitcond6_reg_216 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_enable_reg_pp1_iter0, exitcond6_fu_139_p2, ap_enable_reg_pp1_iter1, exitcond6_reg_216)
    begin
                ap_block_pp1_stage0_subdone <= (((exitcond6_reg_216 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter0_assign_proc : process(in_stream_V_data_V_0_vld_out, exitcond_fu_124_p2)
    begin
                ap_block_state10_pp0_stage0_iter0 <= ((exitcond_fu_124_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage0_iter1_assign_proc : process(out_stream_V_V_full_n, exitcond_reg_202)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((exitcond_reg_202 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state14_pp1_stage0_iter0_assign_proc : process(in_stream_V_data_V_0_vld_out, exitcond6_fu_139_p2)
    begin
                ap_block_state14_pp1_stage0_iter0 <= ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (in_stream_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state15_pp1_stage0_iter1_assign_proc : process(out_stream_V_V_full_n, exitcond6_reg_216)
    begin
                ap_block_state15_pp1_stage0_iter1 <= ((exitcond6_reg_216 = ap_const_lv1_0) and (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state2 <= ((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state3 <= ((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state4 <= ((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state5 <= ((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state6 <= ((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state7 <= ((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n)
    begin
                ap_block_state8 <= ((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond_fu_124_p2)
    begin
        if ((exitcond_fu_124_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(exitcond6_fu_139_p2)
    begin
        if ((exitcond6_fu_139_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond6_fu_139_p2 <= "1" when (i_reg_76 = IFM_bound_reg_211) else "0";
    exitcond_fu_124_p2 <= "1" when (i1_reg_65 = KER_bound_reg_197) else "0";
    i_11_fu_144_p2 <= std_logic_vector(unsigned(i_reg_76) + unsigned(ap_const_lv32_1));
    i_1_fu_129_p2 <= std_logic_vector(unsigned(i1_reg_65) + unsigned(ap_const_lv32_1));

    in_stream_TDATA_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_stream_V_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, exitcond6_fu_139_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, exitcond_fu_124_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_124_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            in_stream_TDATA_blk_n <= in_stream_V_data_V_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_V_last_0_state(1);
    in_stream_V_data_V_0_ack_in <= in_stream_V_data_V_0_state(1);

    in_stream_V_data_V_0_ack_out_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, exitcond6_fu_139_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_124_p2, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_124_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_stream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_V_data_V_0_data_out_assign_proc : process(in_stream_V_data_V_0_payload_A, in_stream_V_data_V_0_payload_B, in_stream_V_data_V_0_sel)
    begin
        if ((in_stream_V_data_V_0_sel = ap_const_logic_1)) then 
            in_stream_V_data_V_0_data_out <= in_stream_V_data_V_0_payload_B;
        else 
            in_stream_V_data_V_0_data_out <= in_stream_V_data_V_0_payload_A;
        end if; 
    end process;

    in_stream_V_data_V_0_load_A <= (in_stream_V_data_V_0_state_cmp_full and not(in_stream_V_data_V_0_sel_wr));
    in_stream_V_data_V_0_load_B <= (in_stream_V_data_V_0_state_cmp_full and in_stream_V_data_V_0_sel_wr);
    in_stream_V_data_V_0_sel <= in_stream_V_data_V_0_sel_rd;
    in_stream_V_data_V_0_state_cmp_full <= '0' when (in_stream_V_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream_V_data_V_0_vld_in <= in_stream_TVALID;
    in_stream_V_data_V_0_vld_out <= in_stream_V_data_V_0_state(0);

    in_stream_V_last_0_ack_out_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, exitcond6_fu_139_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, exitcond_fu_124_p2, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_124_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_fu_139_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_stream_V_last_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_V_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_V_last_0_vld_in <= in_stream_TVALID;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_stream_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp1_iter1, exitcond6_reg_216, ap_enable_reg_pp0_iter1, exitcond_reg_202)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_reg_202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_reg_216 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            out_stream_V_V_blk_n <= out_stream_V_V_full_n;
        else 
            out_stream_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_stream_V_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_stream_V_data_V_0_data_out, in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp1_iter1, exitcond6_reg_216, ap_enable_reg_pp0_iter1, exitcond_reg_202, reg_92, ap_block_pp0_stage0_01001, ap_block_pp1_stage0_01001)
    begin
        if ((((exitcond_reg_202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_reg_216 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            out_stream_V_V_din <= reg_92;
        elsif (((not(((ap_done_reg = ap_const_logic_1) or (in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_stream_V_V_din <= in_stream_V_data_V_0_data_out;
        else 
            out_stream_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_stream_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_stream_V_data_V_0_vld_out, out_stream_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp1_iter1, exitcond6_reg_216, ap_enable_reg_pp0_iter1, exitcond_reg_202, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_reg_202 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond6_reg_216 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((in_stream_V_data_V_0_vld_out = ap_const_logic_0) or (out_stream_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_stream_V_V_write <= ap_const_logic_1;
        else 
            out_stream_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_111_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_data_V_3_reg_160) * signed(reg_92))), 32));
    tmp2_fu_116_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_data_V_4_reg_166) * signed(tmp_data_V_4_reg_166))), 32));
    tmp3_fu_103_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_data_V_2_reg_154) * signed(tmp_data_V_2_reg_154))), 32));
    tmp4_fu_107_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_data_V_3_reg_160) * signed(tmp_data_V_5_reg_172))), 32));
    tmp_s_fu_97_p2 <= "1" when (in_stream_V_data_V_0_data_out = ap_const_lv32_0) else "0";
end behav;
