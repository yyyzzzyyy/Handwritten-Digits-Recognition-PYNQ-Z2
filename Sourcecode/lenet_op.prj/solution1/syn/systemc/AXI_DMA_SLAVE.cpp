// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXI_DMA_SLAVE.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXI_DMA_SLAVE::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXI_DMA_SLAVE::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state1 = "1";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state2 = "10";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state3 = "100";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state4 = "1000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state5 = "10000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state6 = "100000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_pp0_stage0 = "1000000000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state12 = "10000000000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_state13 = "100000000000";
const sc_lv<13> AXI_DMA_SLAVE::ap_ST_fsm_pp1_stage0 = "1000000000000";
const bool AXI_DMA_SLAVE::ap_const_boolean_1 = true;
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> AXI_DMA_SLAVE::ap_const_lv1_0 = "0";
const sc_lv<1> AXI_DMA_SLAVE::ap_const_lv1_1 = "1";
const sc_lv<2> AXI_DMA_SLAVE::ap_const_lv2_0 = "00";
const sc_lv<2> AXI_DMA_SLAVE::ap_const_lv2_2 = "10";
const sc_lv<2> AXI_DMA_SLAVE::ap_const_lv2_3 = "11";
const sc_lv<2> AXI_DMA_SLAVE::ap_const_lv2_1 = "1";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_1 = "1";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_2 = "10";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_3 = "11";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_4 = "100";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_5 = "101";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_6 = "110";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_7 = "111";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_C = "1100";
const bool AXI_DMA_SLAVE::ap_const_boolean_0 = false;
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_9 = "1001";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_8 = "1000";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_B = "1011";
const sc_lv<32> AXI_DMA_SLAVE::ap_const_lv32_A = "1010";

AXI_DMA_SLAVE::AXI_DMA_SLAVE(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_IFM_bound_fu_135_p2);
    sensitive << ( tmp1_reg_187 );
    sensitive << ( tmp2_reg_192 );

    SC_METHOD(thread_KER_bound_fu_120_p2);
    sensitive << ( tmp3_reg_177 );
    sensitive << ( tmp4_reg_182 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_124_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_202 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_124_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_202 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_124_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_202 );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond6_fu_139_p2 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond6_reg_216 );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond6_fu_139_p2 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond6_reg_216 );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond6_fu_139_p2 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond6_reg_216 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter0);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( exitcond_fu_124_p2 );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( exitcond_reg_202 );

    SC_METHOD(thread_ap_block_state14_pp1_stage0_iter0);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( exitcond6_fu_139_p2 );

    SC_METHOD(thread_ap_block_state15_pp1_stage0_iter1);
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( exitcond6_reg_216 );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_block_state7);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state10);
    sensitive << ( exitcond_fu_124_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state14);
    sensitive << ( exitcond6_fu_139_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_exitcond6_fu_139_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( i_reg_76 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( IFM_bound_reg_211 );

    SC_METHOD(thread_exitcond_fu_124_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i1_reg_65 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( KER_bound_reg_197 );

    SC_METHOD(thread_i_11_fu_144_p2);
    sensitive << ( i_reg_76 );

    SC_METHOD(thread_i_1_fu_129_p2);
    sensitive << ( i1_reg_65 );

    SC_METHOD(thread_in_stream_TDATA_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond6_fu_139_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_fu_124_p2 );

    SC_METHOD(thread_in_stream_TREADY);
    sensitive << ( in_stream_V_last_0_state );

    SC_METHOD(thread_in_stream_V_data_V_0_ack_in);
    sensitive << ( in_stream_V_data_V_0_state );

    SC_METHOD(thread_in_stream_V_data_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond6_fu_139_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_124_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_in_stream_V_data_V_0_data_out);
    sensitive << ( in_stream_V_data_V_0_payload_A );
    sensitive << ( in_stream_V_data_V_0_payload_B );
    sensitive << ( in_stream_V_data_V_0_sel );

    SC_METHOD(thread_in_stream_V_data_V_0_load_A);
    sensitive << ( in_stream_V_data_V_0_sel_wr );
    sensitive << ( in_stream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_V_data_V_0_load_B);
    sensitive << ( in_stream_V_data_V_0_sel_wr );
    sensitive << ( in_stream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_V_data_V_0_sel);
    sensitive << ( in_stream_V_data_V_0_sel_rd );

    SC_METHOD(thread_in_stream_V_data_V_0_state_cmp_full);
    sensitive << ( in_stream_V_data_V_0_state );

    SC_METHOD(thread_in_stream_V_data_V_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_in_stream_V_data_V_0_vld_out);
    sensitive << ( in_stream_V_data_V_0_state );

    SC_METHOD(thread_in_stream_V_last_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond6_fu_139_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_124_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_in_stream_V_last_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_out_stream_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond6_reg_216 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_202 );

    SC_METHOD(thread_out_stream_V_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_data_V_0_data_out );
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond6_reg_216 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_202 );
    sensitive << ( reg_92 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_out_stream_V_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond6_reg_216 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_202 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp1_fu_111_p2);
    sensitive << ( reg_92 );
    sensitive << ( tmp_data_V_3_reg_160 );

    SC_METHOD(thread_tmp2_fu_116_p2);
    sensitive << ( tmp_data_V_4_reg_166 );

    SC_METHOD(thread_tmp3_fu_103_p2);
    sensitive << ( tmp_data_V_2_reg_154 );

    SC_METHOD(thread_tmp4_fu_107_p2);
    sensitive << ( tmp_data_V_3_reg_160 );
    sensitive << ( tmp_data_V_5_reg_172 );

    SC_METHOD(thread_tmp_s_fu_97_p2);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_data_V_0_data_out );
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_data_V_0_vld_out );
    sensitive << ( out_stream_V_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( exitcond6_fu_139_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_124_p2 );
    sensitive << ( tmp_s_reg_150 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000001";
    in_stream_V_data_V_0_sel_rd = SC_LOGIC_0;
    in_stream_V_data_V_0_sel_wr = SC_LOGIC_0;
    in_stream_V_data_V_0_state = "00";
    in_stream_V_last_0_state = "00";
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXI_DMA_SLAVE_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_stream_TDATA, "(port)in_stream_TDATA");
    sc_trace(mVcdFile, in_stream_TVALID, "(port)in_stream_TVALID");
    sc_trace(mVcdFile, in_stream_TREADY, "(port)in_stream_TREADY");
    sc_trace(mVcdFile, in_stream_TLAST, "(port)in_stream_TLAST");
    sc_trace(mVcdFile, out_stream_V_V_din, "(port)out_stream_V_V_din");
    sc_trace(mVcdFile, out_stream_V_V_full_n, "(port)out_stream_V_V_full_n");
    sc_trace(mVcdFile, out_stream_V_V_write, "(port)out_stream_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_stream_V_data_V_0_data_out, "in_stream_V_data_V_0_data_out");
    sc_trace(mVcdFile, in_stream_V_data_V_0_vld_in, "in_stream_V_data_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_V_data_V_0_vld_out, "in_stream_V_data_V_0_vld_out");
    sc_trace(mVcdFile, in_stream_V_data_V_0_ack_in, "in_stream_V_data_V_0_ack_in");
    sc_trace(mVcdFile, in_stream_V_data_V_0_ack_out, "in_stream_V_data_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_V_data_V_0_payload_A, "in_stream_V_data_V_0_payload_A");
    sc_trace(mVcdFile, in_stream_V_data_V_0_payload_B, "in_stream_V_data_V_0_payload_B");
    sc_trace(mVcdFile, in_stream_V_data_V_0_sel_rd, "in_stream_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream_V_data_V_0_sel_wr, "in_stream_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream_V_data_V_0_sel, "in_stream_V_data_V_0_sel");
    sc_trace(mVcdFile, in_stream_V_data_V_0_load_A, "in_stream_V_data_V_0_load_A");
    sc_trace(mVcdFile, in_stream_V_data_V_0_load_B, "in_stream_V_data_V_0_load_B");
    sc_trace(mVcdFile, in_stream_V_data_V_0_state, "in_stream_V_data_V_0_state");
    sc_trace(mVcdFile, in_stream_V_data_V_0_state_cmp_full, "in_stream_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream_V_last_0_vld_in, "in_stream_V_last_0_vld_in");
    sc_trace(mVcdFile, in_stream_V_last_0_ack_out, "in_stream_V_last_0_ack_out");
    sc_trace(mVcdFile, in_stream_V_last_0_state, "in_stream_V_last_0_state");
    sc_trace(mVcdFile, in_stream_TDATA_blk_n, "in_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, exitcond6_fu_139_p2, "exitcond6_fu_139_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_fu_124_p2, "exitcond_fu_124_p2");
    sc_trace(mVcdFile, out_stream_V_V_blk_n, "out_stream_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, exitcond6_reg_216, "exitcond6_reg_216");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_reg_202, "exitcond_reg_202");
    sc_trace(mVcdFile, i1_reg_65, "i1_reg_65");
    sc_trace(mVcdFile, i_reg_76, "i_reg_76");
    sc_trace(mVcdFile, reg_92, "reg_92");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter0, "ap_block_state10_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage0_iter0, "ap_block_state14_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state15_pp1_stage0_iter1, "ap_block_state15_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, tmp_s_fu_97_p2, "tmp_s_fu_97_p2");
    sc_trace(mVcdFile, tmp_s_reg_150, "tmp_s_reg_150");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_data_V_2_reg_154, "tmp_data_V_2_reg_154");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, tmp_data_V_3_reg_160, "tmp_data_V_3_reg_160");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, tmp_data_V_4_reg_166, "tmp_data_V_4_reg_166");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, tmp_data_V_5_reg_172, "tmp_data_V_5_reg_172");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, tmp3_fu_103_p2, "tmp3_fu_103_p2");
    sc_trace(mVcdFile, tmp3_reg_177, "tmp3_reg_177");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, tmp4_fu_107_p2, "tmp4_fu_107_p2");
    sc_trace(mVcdFile, tmp4_reg_182, "tmp4_reg_182");
    sc_trace(mVcdFile, tmp1_fu_111_p2, "tmp1_fu_111_p2");
    sc_trace(mVcdFile, tmp1_reg_187, "tmp1_reg_187");
    sc_trace(mVcdFile, tmp2_fu_116_p2, "tmp2_fu_116_p2");
    sc_trace(mVcdFile, tmp2_reg_192, "tmp2_reg_192");
    sc_trace(mVcdFile, KER_bound_fu_120_p2, "KER_bound_fu_120_p2");
    sc_trace(mVcdFile, KER_bound_reg_197, "KER_bound_reg_197");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_1_fu_129_p2, "i_1_fu_129_p2");
    sc_trace(mVcdFile, IFM_bound_fu_135_p2, "IFM_bound_fu_135_p2");
    sc_trace(mVcdFile, IFM_bound_reg_211, "IFM_bound_reg_211");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, i_11_fu_144_p2, "i_11_fu_144_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state10, "ap_condition_pp0_exit_iter0_state10");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state14, "ap_condition_pp1_exit_iter0_state14");
    sc_trace(mVcdFile, ap_block_state7, "ap_block_state7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
}

AXI_DMA_SLAVE::~AXI_DMA_SLAVE() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AXI_DMA_SLAVE::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state10.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state10.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state14.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state14.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state14.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i1_reg_65 = i_1_fu_129_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i1_reg_65 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_76 = i_11_fu_144_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_reg_76 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_vld_out.read()))) {
            in_stream_V_data_V_0_sel_rd =  (sc_logic) (~in_stream_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_ack_in.read()))) {
            in_stream_V_data_V_0_sel_wr =  (sc_logic) (~in_stream_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_stream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_stream_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_stream_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_stream_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_stream_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_ack_out.read()))))) {
            in_stream_V_data_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_V_last_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_last_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_V_last_0_state.read())))) {
            in_stream_V_last_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_last_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_V_last_0_state.read())))) {
            in_stream_V_last_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_V_last_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_V_last_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_last_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_0_ack_out.read()))))) {
            in_stream_V_last_0_state = ap_const_lv2_3;
        } else {
            in_stream_V_last_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        IFM_bound_reg_211 = IFM_bound_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        KER_bound_reg_197 = KER_bound_fu_120_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond6_reg_216 = exitcond6_fu_139_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_202 = exitcond_fu_124_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_load_A.read())) {
        in_stream_V_data_V_0_payload_A = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_load_B.read())) {
        in_stream_V_data_V_0_payload_B = in_stream_TDATA.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_92 = in_stream_V_data_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_reg_150.read()))) {
        tmp1_reg_187 = tmp1_fu_111_p2.read();
        tmp2_reg_192 = tmp2_fu_116_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_150.read()))) {
        tmp3_reg_177 = tmp3_fu_103_p2.read();
        tmp4_reg_182 = tmp4_fu_107_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
        tmp_data_V_2_reg_154 = in_stream_V_data_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
        tmp_data_V_3_reg_160 = in_stream_V_data_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
        tmp_data_V_4_reg_166 = in_stream_V_data_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
        tmp_data_V_5_reg_172 = in_stream_V_data_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
        tmp_s_reg_150 = tmp_s_fu_97_p2.read();
    }
}

void AXI_DMA_SLAVE::thread_IFM_bound_fu_135_p2() {
    IFM_bound_fu_135_p2 = (!tmp2_reg_192.read().is_01() || !tmp1_reg_187.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp2_reg_192.read()) * sc_bigint<32>(tmp1_reg_187.read());
}

void AXI_DMA_SLAVE::thread_KER_bound_fu_120_p2() {
    KER_bound_fu_120_p2 = (!tmp4_reg_182.read().is_01() || !tmp3_reg_177.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp4_reg_182.read()) * sc_bigint<32>(tmp3_reg_177.read());
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[9];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[12];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[10];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[11];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AXI_DMA_SLAVE::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AXI_DMA_SLAVE::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_SLAVE::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_202.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())));
}

void AXI_DMA_SLAVE::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_202.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())));
}

void AXI_DMA_SLAVE::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_202.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())));
}

void AXI_DMA_SLAVE::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_SLAVE::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_reg_216.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())));
}

void AXI_DMA_SLAVE::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_reg_216.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())));
}

void AXI_DMA_SLAVE::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_reg_216.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())));
}

void AXI_DMA_SLAVE::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state10_pp0_stage0_iter0() {
    ap_block_state10_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_202.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state14_pp1_stage0_iter0() {
    ap_block_state14_pp1_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state15_pp1_stage0_iter1() {
    ap_block_state15_pp1_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_reg_216.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state6() {
    ap_block_state6 = (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state7() {
    ap_block_state7 = (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_block_state8() {
    ap_block_state8 = (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()));
}

void AXI_DMA_SLAVE::thread_ap_condition_pp0_exit_iter0_state10() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_124_p2.read())) {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state10 = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_ap_condition_pp1_exit_iter0_state14() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond6_fu_139_p2.read())) {
        ap_condition_pp1_exit_iter0_state14 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state14 = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXI_DMA_SLAVE::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AXI_DMA_SLAVE::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void AXI_DMA_SLAVE::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void AXI_DMA_SLAVE::thread_exitcond6_fu_139_p2() {
    exitcond6_fu_139_p2 = (!i_reg_76.read().is_01() || !IFM_bound_reg_211.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_76.read() == IFM_bound_reg_211.read());
}

void AXI_DMA_SLAVE::thread_exitcond_fu_124_p2() {
    exitcond_fu_124_p2 = (!i1_reg_65.read().is_01() || !KER_bound_reg_197.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_65.read() == KER_bound_reg_197.read());
}

void AXI_DMA_SLAVE::thread_i_11_fu_144_p2() {
    i_11_fu_144_p2 = (!i_reg_76.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_76.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXI_DMA_SLAVE::thread_i_1_fu_129_p2() {
    i_1_fu_129_p2 = (!i1_reg_65.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i1_reg_65.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXI_DMA_SLAVE::thread_in_stream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read())))) {
        in_stream_TDATA_blk_n = in_stream_V_data_V_0_state.read()[0];
    } else {
        in_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_SLAVE::thread_in_stream_TREADY() {
    in_stream_TREADY = in_stream_V_last_0_state.read()[1];
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_ack_in() {
    in_stream_V_data_V_0_ack_in = in_stream_V_data_V_0_state.read()[1];
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))))) {
        in_stream_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_V_0_sel.read())) {
        in_stream_V_data_V_0_data_out = in_stream_V_data_V_0_payload_B.read();
    } else {
        in_stream_V_data_V_0_data_out = in_stream_V_data_V_0_payload_A.read();
    }
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_load_A() {
    in_stream_V_data_V_0_load_A = (in_stream_V_data_V_0_state_cmp_full.read() & ~in_stream_V_data_V_0_sel_wr.read());
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_load_B() {
    in_stream_V_data_V_0_load_B = (in_stream_V_data_V_0_sel_wr.read() & in_stream_V_data_V_0_state_cmp_full.read());
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_sel() {
    in_stream_V_data_V_0_sel = in_stream_V_data_V_0_sel_rd.read();
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_state_cmp_full() {
    in_stream_V_data_V_0_state_cmp_full =  (sc_logic) ((!in_stream_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_vld_in() {
    in_stream_V_data_V_0_vld_in = in_stream_TVALID.read();
}

void AXI_DMA_SLAVE::thread_in_stream_V_data_V_0_vld_out() {
    in_stream_V_data_V_0_vld_out = in_stream_V_data_V_0_state.read()[0];
}

void AXI_DMA_SLAVE::thread_in_stream_V_last_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_124_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_139_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))))) {
        in_stream_V_last_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_V_last_0_ack_out = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_in_stream_V_last_0_vld_in() {
    in_stream_V_last_0_vld_in = in_stream_TVALID.read();
}

void AXI_DMA_SLAVE::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_out_stream_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_reg_216.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_202.read())))) {
        out_stream_V_V_blk_n = out_stream_V_V_full_n.read();
    } else {
        out_stream_V_V_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_SLAVE::thread_out_stream_V_V_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_202.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_reg_216.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0)))) {
        out_stream_V_V_din = reg_92.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))))) {
        out_stream_V_V_din = in_stream_V_data_V_0_data_out.read();
    } else {
        out_stream_V_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void AXI_DMA_SLAVE::thread_out_stream_V_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_202.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_reg_216.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        out_stream_V_V_write = ap_const_logic_1;
    } else {
        out_stream_V_V_write = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void AXI_DMA_SLAVE::thread_start_out() {
    start_out = real_start.read();
}

void AXI_DMA_SLAVE::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void AXI_DMA_SLAVE::thread_tmp1_fu_111_p2() {
    tmp1_fu_111_p2 = (!tmp_data_V_3_reg_160.read().is_01() || !reg_92.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_data_V_3_reg_160.read()) * sc_bigint<32>(reg_92.read());
}

void AXI_DMA_SLAVE::thread_tmp2_fu_116_p2() {
    tmp2_fu_116_p2 = (!tmp_data_V_4_reg_166.read().is_01() || !tmp_data_V_4_reg_166.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_data_V_4_reg_166.read()) * sc_bigint<32>(tmp_data_V_4_reg_166.read());
}

void AXI_DMA_SLAVE::thread_tmp3_fu_103_p2() {
    tmp3_fu_103_p2 = (!tmp_data_V_2_reg_154.read().is_01() || !tmp_data_V_2_reg_154.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_data_V_2_reg_154.read()) * sc_bigint<32>(tmp_data_V_2_reg_154.read());
}

void AXI_DMA_SLAVE::thread_tmp4_fu_107_p2() {
    tmp4_fu_107_p2 = (!tmp_data_V_3_reg_160.read().is_01() || !tmp_data_V_5_reg_172.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_data_V_3_reg_160.read()) * sc_bigint<32>(tmp_data_V_5_reg_172.read());
}

void AXI_DMA_SLAVE::thread_tmp_s_fu_97_p2() {
    tmp_s_fu_97_p2 = (!in_stream_V_data_V_0_data_out.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_V_data_V_0_data_out.read() == ap_const_lv32_0);
}

void AXI_DMA_SLAVE::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_reg_150.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_V_full_n.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_150.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 512 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_124_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_124_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 4096 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond6_fu_139_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond6_fu_139_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

}

