// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXI_DMA_MASTER.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXI_DMA_MASTER::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXI_DMA_MASTER::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state1 = "1";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state2 = "10";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state3 = "100";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state4 = "1000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state5 = "10000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state6 = "100000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_pp0_stage0 = "100000000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state15 = "1000000000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state16 = "10000000000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_state17 = "100000000000000";
const sc_lv<16> AXI_DMA_MASTER::ap_ST_fsm_pp1_stage0 = "1000000000000000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AXI_DMA_MASTER::ap_const_boolean_1 = true;
const sc_lv<1> AXI_DMA_MASTER::ap_const_lv1_0 = "0";
const sc_lv<1> AXI_DMA_MASTER::ap_const_lv1_1 = "1";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_0 = "00";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_2 = "10";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_3 = "11";
const sc_lv<2> AXI_DMA_MASTER::ap_const_lv2_1 = "1";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_1 = "1";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_2 = "10";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_3 = "11";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_4 = "100";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_5 = "101";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_6 = "110";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_7 = "111";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_F = "1111";
const bool AXI_DMA_MASTER::ap_const_boolean_0 = false;
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_B = "1011";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_8 = "1000";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_9 = "1001";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_A = "1010";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_D = "1101";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_E = "1110";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> AXI_DMA_MASTER::ap_const_lv32_C = "1100";

AXI_DMA_MASTER::AXI_DMA_MASTER(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_KER_bound_fu_129_p2);
    sensitive << ( tmp5_reg_208 );
    sensitive << ( tmp6_reg_213 );

    SC_METHOD(thread_OFM_bound_fu_154_p2);
    sensitive << ( tmp2_reg_218 );
    sensitive << ( tmp3_reg_223 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_239 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state13_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_239 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state13_io );
    sensitive << ( ap_block_state14_io );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond7_reg_264 );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state19_io );
    sensitive << ( ap_block_state20_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state19_io );
    sensitive << ( ap_block_state20_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_stream_V_V_empty_n );

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond_reg_239 );

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter1);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( exitcond_reg_239 );

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond_reg_239_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state15);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );

    SC_METHOD(thread_ap_block_state18_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state19_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond7_reg_264 );

    SC_METHOD(thread_ap_block_state19_pp1_stage0_iter1);
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( exitcond7_reg_264 );

    SC_METHOD(thread_ap_block_state20_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond7_reg_264_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_state20_pp1_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state12);
    sensitive << ( exitcond_fu_138_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state18);
    sensitive << ( exitcond7_fu_163_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_exitcond7_fu_163_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i_reg_83 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( OFM_bound_reg_253 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_exitcond_fu_138_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i1_reg_72 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( KER_bound_reg_228 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_12_fu_168_p2);
    sensitive << ( i_reg_83 );

    SC_METHOD(thread_i_2_fu_143_p2);
    sensitive << ( i1_reg_72 );

    SC_METHOD(thread_in_stream_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_239 );

    SC_METHOD(thread_in_stream_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_239 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_V_data_V_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_239 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond7_reg_264_pp1_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_reg_239_pp0_iter1_reg );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_V_last_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_in);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_data_V_1_data_out);
    sensitive << ( out_stream_V_data_V_1_payload_A );
    sensitive << ( out_stream_V_data_V_1_payload_B );
    sensitive << ( out_stream_V_data_V_1_sel );

    SC_METHOD(thread_out_stream_V_data_V_1_load_A);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_load_B);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_sel);
    sensitive << ( out_stream_V_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_data_V_1_state_cmp_full);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_239 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_out);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_last_1_ack_in);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_out_stream_V_last_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_last_1_data_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_239 );
    sensitive << ( tmp_last_1_reg_248 );
    sensitive << ( tmp_last_reg_273 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_out_stream_V_last_1_data_out);
    sensitive << ( out_stream_V_last_1_payload_A );
    sensitive << ( out_stream_V_last_1_payload_B );
    sensitive << ( out_stream_V_last_1_sel );

    SC_METHOD(thread_out_stream_V_last_1_load_A);
    sensitive << ( out_stream_V_last_1_sel_wr );
    sensitive << ( out_stream_V_last_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_1_load_B);
    sensitive << ( out_stream_V_last_1_sel_wr );
    sensitive << ( out_stream_V_last_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_1_sel);
    sensitive << ( out_stream_V_last_1_sel_rd );

    SC_METHOD(thread_out_stream_V_last_1_state_cmp_full);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_out_stream_V_last_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond7_reg_264 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_239 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_V_last_1_vld_out);
    sensitive << ( out_stream_V_last_1_state );

    SC_METHOD(thread_tmp2_fu_119_p0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_94 );

    SC_METHOD(thread_tmp2_fu_119_p2);
    sensitive << ( tmp_V_215_reg_196 );
    sensitive << ( tmp2_fu_119_p0 );

    SC_METHOD(thread_tmp3_fu_124_p0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_99 );

    SC_METHOD(thread_tmp3_fu_124_p2);
    sensitive << ( tmp_V_215_reg_196 );
    sensitive << ( tmp3_fu_124_p0 );

    SC_METHOD(thread_tmp5_fu_110_p2);
    sensitive << ( tmp_V_211_reg_183 );
    sensitive << ( tmp_V_212_reg_190 );

    SC_METHOD(thread_tmp6_fu_114_p1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_99 );

    SC_METHOD(thread_tmp6_fu_114_p2);
    sensitive << ( tmp_V_211_reg_183 );
    sensitive << ( tmp6_fu_114_p1 );

    SC_METHOD(thread_tmp_123_fu_158_p2);
    sensitive << ( OFM_bound_reg_253 );

    SC_METHOD(thread_tmp_124_fu_133_p2);
    sensitive << ( KER_bound_reg_228 );

    SC_METHOD(thread_tmp_last_1_fu_149_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i1_reg_72 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_124_reg_234 );
    sensitive << ( exitcond_fu_138_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_last_fu_174_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i_reg_83 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( tmp_123_reg_259 );
    sensitive << ( exitcond7_fu_163_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_tmp_s_fu_104_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_dout );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_V_V_empty_n );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_last_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_s_reg_179 );
    sensitive << ( exitcond_fu_138_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond7_fu_163_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_CS_fsm_state15 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000001";
    out_stream_V_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_data_V_1_state = "00";
    out_stream_V_last_1_sel_rd = SC_LOGIC_0;
    out_stream_V_last_1_sel_wr = SC_LOGIC_0;
    out_stream_V_last_1_state = "00";
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXI_DMA_MASTER_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_stream_V_V_dout, "(port)in_stream_V_V_dout");
    sc_trace(mVcdFile, in_stream_V_V_empty_n, "(port)in_stream_V_V_empty_n");
    sc_trace(mVcdFile, in_stream_V_V_read, "(port)in_stream_V_V_read");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_stream_V_data_V_1_data_out, "out_stream_V_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_in, "out_stream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_out, "out_stream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_in, "out_stream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_out, "out_stream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_A, "out_stream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_B, "out_stream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_rd, "out_stream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_wr, "out_stream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel, "out_stream_V_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_A, "out_stream_V_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_B, "out_stream_V_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state, "out_stream_V_data_V_1_state");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state_cmp_full, "out_stream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_last_1_data_in, "out_stream_V_last_1_data_in");
    sc_trace(mVcdFile, out_stream_V_last_1_data_out, "out_stream_V_last_1_data_out");
    sc_trace(mVcdFile, out_stream_V_last_1_vld_in, "out_stream_V_last_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_last_1_vld_out, "out_stream_V_last_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_last_1_ack_in, "out_stream_V_last_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_last_1_ack_out, "out_stream_V_last_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_last_1_payload_A, "out_stream_V_last_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_last_1_payload_B, "out_stream_V_last_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_last_1_sel_rd, "out_stream_V_last_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_last_1_sel_wr, "out_stream_V_last_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_last_1_sel, "out_stream_V_last_1_sel");
    sc_trace(mVcdFile, out_stream_V_last_1_load_A, "out_stream_V_last_1_load_A");
    sc_trace(mVcdFile, out_stream_V_last_1_load_B, "out_stream_V_last_1_load_B");
    sc_trace(mVcdFile, out_stream_V_last_1_state, "out_stream_V_last_1_state");
    sc_trace(mVcdFile, out_stream_V_last_1_state_cmp_full, "out_stream_V_last_1_state_cmp_full");
    sc_trace(mVcdFile, in_stream_V_V_blk_n, "in_stream_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, exitcond7_reg_264, "exitcond7_reg_264");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_239, "exitcond_reg_239");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, exitcond7_reg_264_pp1_iter1_reg, "exitcond7_reg_264_pp1_iter1_reg");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, exitcond_reg_239_pp0_iter1_reg, "exitcond_reg_239_pp0_iter1_reg");
    sc_trace(mVcdFile, i1_reg_72, "i1_reg_72");
    sc_trace(mVcdFile, i_reg_83, "i_reg_83");
    sc_trace(mVcdFile, reg_94, "reg_94");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter0, "ap_block_state12_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter1, "ap_block_state13_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter2, "ap_block_state14_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_state18_pp1_stage0_iter0, "ap_block_state18_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state19_pp1_stage0_iter1, "ap_block_state19_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state19_io, "ap_block_state19_io");
    sc_trace(mVcdFile, ap_block_state20_pp1_stage0_iter2, "ap_block_state20_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state20_io, "ap_block_state20_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, reg_99, "reg_99");
    sc_trace(mVcdFile, tmp_s_fu_104_p2, "tmp_s_fu_104_p2");
    sc_trace(mVcdFile, tmp_s_reg_179, "tmp_s_reg_179");
    sc_trace(mVcdFile, tmp_V_211_reg_183, "tmp_V_211_reg_183");
    sc_trace(mVcdFile, tmp_V_212_reg_190, "tmp_V_212_reg_190");
    sc_trace(mVcdFile, tmp_V_215_reg_196, "tmp_V_215_reg_196");
    sc_trace(mVcdFile, tmp5_fu_110_p2, "tmp5_fu_110_p2");
    sc_trace(mVcdFile, tmp5_reg_208, "tmp5_reg_208");
    sc_trace(mVcdFile, tmp6_fu_114_p2, "tmp6_fu_114_p2");
    sc_trace(mVcdFile, tmp6_reg_213, "tmp6_reg_213");
    sc_trace(mVcdFile, tmp2_fu_119_p2, "tmp2_fu_119_p2");
    sc_trace(mVcdFile, tmp2_reg_218, "tmp2_reg_218");
    sc_trace(mVcdFile, tmp3_fu_124_p2, "tmp3_fu_124_p2");
    sc_trace(mVcdFile, tmp3_reg_223, "tmp3_reg_223");
    sc_trace(mVcdFile, KER_bound_fu_129_p2, "KER_bound_fu_129_p2");
    sc_trace(mVcdFile, KER_bound_reg_228, "KER_bound_reg_228");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_124_fu_133_p2, "tmp_124_fu_133_p2");
    sc_trace(mVcdFile, tmp_124_reg_234, "tmp_124_reg_234");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, exitcond_fu_138_p2, "exitcond_fu_138_p2");
    sc_trace(mVcdFile, i_2_fu_143_p2, "i_2_fu_143_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_last_1_fu_149_p2, "tmp_last_1_fu_149_p2");
    sc_trace(mVcdFile, tmp_last_1_reg_248, "tmp_last_1_reg_248");
    sc_trace(mVcdFile, OFM_bound_fu_154_p2, "OFM_bound_fu_154_p2");
    sc_trace(mVcdFile, OFM_bound_reg_253, "OFM_bound_reg_253");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp_123_fu_158_p2, "tmp_123_fu_158_p2");
    sc_trace(mVcdFile, tmp_123_reg_259, "tmp_123_reg_259");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, exitcond7_fu_163_p2, "exitcond7_fu_163_p2");
    sc_trace(mVcdFile, i_12_fu_168_p2, "i_12_fu_168_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_last_fu_174_p2, "tmp_last_fu_174_p2");
    sc_trace(mVcdFile, tmp_last_reg_273, "tmp_last_reg_273");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state12, "ap_condition_pp0_exit_iter0_state12");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state18, "ap_condition_pp1_exit_iter0_state18");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, tmp6_fu_114_p1, "tmp6_fu_114_p1");
    sc_trace(mVcdFile, tmp2_fu_119_p0, "tmp2_fu_119_p0");
    sc_trace(mVcdFile, tmp3_fu_124_p0, "tmp3_fu_124_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_block_state15, "ap_block_state15");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
}

AXI_DMA_MASTER::~AXI_DMA_MASTER() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AXI_DMA_MASTER::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state12.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state12.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state12.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state18.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state18.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state18.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_138_p2.read()))) {
        i1_reg_72 = i_2_fu_143_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i1_reg_72 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_163_p2.read()))) {
        i_reg_83 = i_12_fu_168_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        i_reg_83 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_out.read()))) {
            out_stream_V_data_V_1_sel_rd =  (sc_logic) (~out_stream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_in.read()))) {
            out_stream_V_data_V_1_sel_wr =  (sc_logic) (~out_stream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_stream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()))))) {
            out_stream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_out.read()))) {
            out_stream_V_last_1_sel_rd =  (sc_logic) (~out_stream_V_last_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_in.read()))) {
            out_stream_V_last_1_sel_wr =  (sc_logic) (~out_stream_V_last_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_1_state.read())))) {
            out_stream_V_last_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_1_state.read())))) {
            out_stream_V_last_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_ack_out.read()))))) {
            out_stream_V_last_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_last_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        KER_bound_reg_228 = KER_bound_fu_129_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        OFM_bound_reg_253 = OFM_bound_fu_154_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond7_reg_264 = exitcond7_fu_163_p2.read();
        exitcond7_reg_264_pp1_iter1_reg = exitcond7_reg_264.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_239 = exitcond_fu_138_p2.read();
        exitcond_reg_239_pp0_iter1_reg = exitcond_reg_239.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_A.read())) {
        out_stream_V_data_V_1_payload_A = in_stream_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_B.read())) {
        out_stream_V_data_V_1_payload_B = in_stream_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_load_A.read())) {
        out_stream_V_last_1_payload_A = out_stream_V_last_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_load_B.read())) {
        out_stream_V_last_1_payload_B = out_stream_V_last_1_data_in.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_94 = in_stream_V_V_dout.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
  !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        reg_99 = in_stream_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_reg_179.read()))) {
        tmp2_reg_218 = tmp2_fu_119_p2.read();
        tmp3_reg_223 = tmp3_fu_124_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_179.read()))) {
        tmp5_reg_208 = tmp5_fu_110_p2.read();
        tmp6_reg_213 = tmp6_fu_114_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        tmp_123_reg_259 = tmp_123_fu_158_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_124_reg_234 = tmp_124_fu_133_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_V_211_reg_183 = in_stream_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_V_212_reg_190 = in_stream_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_V_215_reg_196 = in_stream_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_138_p2.read()))) {
        tmp_last_1_reg_248 = tmp_last_1_fu_149_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_163_p2.read()))) {
        tmp_last_reg_273 = tmp_last_fu_174_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
        tmp_s_reg_179 = tmp_s_fu_104_p2.read();
    }
}

void AXI_DMA_MASTER::thread_KER_bound_fu_129_p2() {
    KER_bound_fu_129_p2 = (!tmp6_reg_213.read().is_01() || !tmp5_reg_208.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp6_reg_213.read()) * sc_bigint<32>(tmp5_reg_208.read());
}

void AXI_DMA_MASTER::thread_OFM_bound_fu_154_p2() {
    OFM_bound_fu_154_p2 = (!tmp3_reg_223.read().is_01() || !tmp2_reg_218.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp3_reg_223.read()) * sc_bigint<32>(tmp2_reg_218.read());
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[11];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[15];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[12];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[13];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[14];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AXI_DMA_MASTER::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state19_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state19_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read())));
}

void AXI_DMA_MASTER::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state12_pp0_stage0_iter0() {
    ap_block_state12_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state13_io() {
    ap_block_state13_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state13_pp0_stage0_iter1() {
    ap_block_state13_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state14_io() {
    ap_block_state14_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state14_pp0_stage0_iter2() {
    ap_block_state14_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state15() {
    ap_block_state15 = (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state18_pp1_stage0_iter0() {
    ap_block_state18_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_block_state19_io() {
    ap_block_state19_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state19_pp1_stage0_iter1() {
    ap_block_state19_pp1_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state20_io() {
    ap_block_state20_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void AXI_DMA_MASTER::thread_ap_block_state20_pp1_stage0_iter2() {
    ap_block_state20_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXI_DMA_MASTER::thread_ap_condition_pp0_exit_iter0_state12() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_138_p2.read())) {
        ap_condition_pp0_exit_iter0_state12 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state12 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_condition_pp1_exit_iter0_state18() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_163_p2.read())) {
        ap_condition_pp1_exit_iter0_state18 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state18 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXI_DMA_MASTER::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AXI_DMA_MASTER::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void AXI_DMA_MASTER::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_exitcond7_fu_163_p2() {
    exitcond7_fu_163_p2 = (!i_reg_83.read().is_01() || !OFM_bound_reg_253.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_83.read() == OFM_bound_reg_253.read());
}

void AXI_DMA_MASTER::thread_exitcond_fu_138_p2() {
    exitcond_fu_138_p2 = (!i1_reg_72.read().is_01() || !KER_bound_reg_228.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_72.read() == KER_bound_reg_228.read());
}

void AXI_DMA_MASTER::thread_i_12_fu_168_p2() {
    i_12_fu_168_p2 = (!i_reg_83.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_83.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXI_DMA_MASTER::thread_i_2_fu_143_p2() {
    i_2_fu_143_p2 = (!i1_reg_72.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i1_reg_72.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXI_DMA_MASTER::thread_in_stream_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read())))) {
        in_stream_V_V_blk_n = in_stream_V_V_empty_n.read();
    } else {
        in_stream_V_V_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_MASTER::thread_in_stream_V_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        in_stream_V_V_read = ap_const_logic_1;
    } else {
        in_stream_V_V_read = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_V_data_V_1_data_out.read();
}

void AXI_DMA_MASTER::thread_out_stream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264_pp1_iter1_reg.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239_pp0_iter1_reg.read())))) {
        out_stream_TDATA_blk_n = out_stream_V_data_V_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void AXI_DMA_MASTER::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_V_last_1_data_out.read();
}

void AXI_DMA_MASTER::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_V_last_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_ack_in() {
    out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state.read()[1];
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_ack_out() {
    out_stream_V_data_V_1_ack_out = out_stream_TREADY.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_sel.read())) {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B.read();
    } else {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A.read();
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_load_A() {
    out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full.read() & ~out_stream_V_data_V_1_sel_wr.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_load_B() {
    out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_sel_wr.read() & out_stream_V_data_V_1_state_cmp_full.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_sel() {
    out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_state_cmp_full() {
    out_stream_V_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        out_stream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_data_V_1_vld_out() {
    out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_ack_in() {
    out_stream_V_last_1_ack_in = out_stream_V_last_1_state.read()[1];
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_ack_out() {
    out_stream_V_last_1_ack_out = out_stream_TREADY.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
        out_stream_V_last_1_data_in =  (sc_logic) (tmp_last_reg_273.read()[0]);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_stream_V_last_1_data_in =  (sc_logic) (tmp_last_1_reg_248.read()[0]);
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                 esl_seteq<1,1,1>(in_stream_V_V_empty_n.read(), ap_const_logic_1)))) {
        out_stream_V_last_1_data_in =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        out_stream_V_last_1_data_in = sc_logic('X');
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_1_sel.read())) {
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_B.read();
    } else {
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_A.read();
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_load_A() {
    out_stream_V_last_1_load_A = (out_stream_V_last_1_state_cmp_full.read() & ~out_stream_V_last_1_sel_wr.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_load_B() {
    out_stream_V_last_1_load_B = (out_stream_V_last_1_sel_wr.read() & out_stream_V_last_1_state_cmp_full.read());
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_sel() {
    out_stream_V_last_1_sel = out_stream_V_last_1_sel_rd.read();
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_state_cmp_full() {
    out_stream_V_last_1_state_cmp_full =  (sc_logic) ((!out_stream_V_last_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_last_1_state.read() != ap_const_lv2_1))[0];
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_239.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_reg_264.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()))))) {
        out_stream_V_last_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_last_1_vld_in = ap_const_logic_0;
    }
}

void AXI_DMA_MASTER::thread_out_stream_V_last_1_vld_out() {
    out_stream_V_last_1_vld_out = out_stream_V_last_1_state.read()[0];
}

void AXI_DMA_MASTER::thread_tmp2_fu_119_p0() {
    tmp2_fu_119_p0 = reg_94.read();
}

void AXI_DMA_MASTER::thread_tmp2_fu_119_p2() {
    tmp2_fu_119_p2 = (!tmp2_fu_119_p0.read().is_01() || !tmp_V_215_reg_196.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp2_fu_119_p0.read()) * sc_bigint<32>(tmp_V_215_reg_196.read());
}

void AXI_DMA_MASTER::thread_tmp3_fu_124_p0() {
    tmp3_fu_124_p0 = reg_99.read();
}

void AXI_DMA_MASTER::thread_tmp3_fu_124_p2() {
    tmp3_fu_124_p2 = (!tmp3_fu_124_p0.read().is_01() || !tmp_V_215_reg_196.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp3_fu_124_p0.read()) * sc_bigint<32>(tmp_V_215_reg_196.read());
}

void AXI_DMA_MASTER::thread_tmp5_fu_110_p2() {
    tmp5_fu_110_p2 = (!tmp_V_211_reg_183.read().is_01() || !tmp_V_212_reg_190.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_V_211_reg_183.read()) * sc_bigint<32>(tmp_V_212_reg_190.read());
}

void AXI_DMA_MASTER::thread_tmp6_fu_114_p1() {
    tmp6_fu_114_p1 = reg_99.read();
}

void AXI_DMA_MASTER::thread_tmp6_fu_114_p2() {
    tmp6_fu_114_p2 = (!tmp_V_211_reg_183.read().is_01() || !tmp6_fu_114_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_V_211_reg_183.read()) * sc_bigint<32>(tmp6_fu_114_p1.read());
}

void AXI_DMA_MASTER::thread_tmp_123_fu_158_p2() {
    tmp_123_fu_158_p2 = (!OFM_bound_reg_253.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(OFM_bound_reg_253.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void AXI_DMA_MASTER::thread_tmp_124_fu_133_p2() {
    tmp_124_fu_133_p2 = (!KER_bound_reg_228.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(KER_bound_reg_228.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void AXI_DMA_MASTER::thread_tmp_last_1_fu_149_p2() {
    tmp_last_1_fu_149_p2 = (!i1_reg_72.read().is_01() || !tmp_124_reg_234.read().is_01())? sc_lv<1>(): sc_lv<1>(i1_reg_72.read() == tmp_124_reg_234.read());
}

void AXI_DMA_MASTER::thread_tmp_last_fu_174_p2() {
    tmp_last_fu_174_p2 = (!i_reg_83.read().is_01() || !tmp_123_reg_259.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_83.read() == tmp_123_reg_259.read());
}

void AXI_DMA_MASTER::thread_tmp_s_fu_104_p2() {
    tmp_s_fu_104_p2 = (!in_stream_V_V_dout.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_V_V_dout.read() == ap_const_lv32_0);
}

void AXI_DMA_MASTER::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_reg_179.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(out_stream_V_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_reg_179.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 2048 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_138_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_138_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 32768 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_163_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_163_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXX";
            break;
    }
}

}

