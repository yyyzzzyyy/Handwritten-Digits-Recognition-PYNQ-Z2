// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXI_DMA_MASTER (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream_V_V_dout,
        in_stream_V_V_empty_n,
        in_stream_V_V_read,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TLAST
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 16'd2048;
parameter    ap_ST_fsm_state15 = 16'd4096;
parameter    ap_ST_fsm_state16 = 16'd8192;
parameter    ap_ST_fsm_state17 = 16'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_V_V_dout;
input   in_stream_V_V_empty_n;
output   in_stream_V_V_read;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output   out_stream_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_stream_V_data_V_1_data_out;
reg    out_stream_V_data_V_1_vld_in;
wire    out_stream_V_data_V_1_vld_out;
wire    out_stream_V_data_V_1_ack_in;
wire    out_stream_V_data_V_1_ack_out;
reg   [31:0] out_stream_V_data_V_1_payload_A;
reg   [31:0] out_stream_V_data_V_1_payload_B;
reg    out_stream_V_data_V_1_sel_rd;
reg    out_stream_V_data_V_1_sel_wr;
wire    out_stream_V_data_V_1_sel;
wire    out_stream_V_data_V_1_load_A;
wire    out_stream_V_data_V_1_load_B;
reg   [1:0] out_stream_V_data_V_1_state;
wire    out_stream_V_data_V_1_state_cmp_full;
reg    out_stream_V_last_1_data_in;
reg    out_stream_V_last_1_data_out;
reg    out_stream_V_last_1_vld_in;
wire    out_stream_V_last_1_vld_out;
wire    out_stream_V_last_1_ack_in;
wire    out_stream_V_last_1_ack_out;
reg    out_stream_V_last_1_payload_A;
reg    out_stream_V_last_1_payload_B;
reg    out_stream_V_last_1_sel_rd;
reg    out_stream_V_last_1_sel_wr;
wire    out_stream_V_last_1_sel;
wire    out_stream_V_last_1_load_A;
wire    out_stream_V_last_1_load_B;
reg   [1:0] out_stream_V_last_1_state;
wire    out_stream_V_last_1_state_cmp_full;
reg    in_stream_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond7_reg_264;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_239;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state9;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond7_reg_264_pp1_iter1_reg;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_239_pp0_iter1_reg;
reg   [31:0] i1_reg_72;
reg   [31:0] i_reg_83;
reg   [31:0] reg_94;
reg    ap_block_state1;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_state18_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
reg    ap_block_state19_io;
wire    ap_block_state20_pp1_stage0_iter2;
reg    ap_block_state20_io;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] reg_99;
wire   [0:0] tmp_s_fu_104_p2;
reg   [0:0] tmp_s_reg_179;
reg  signed [31:0] tmp_V_211_reg_183;
reg  signed [31:0] tmp_V_212_reg_190;
reg  signed [31:0] tmp_V_215_reg_196;
wire  signed [31:0] tmp5_fu_110_p2;
reg  signed [31:0] tmp5_reg_208;
wire  signed [31:0] tmp6_fu_114_p2;
reg  signed [31:0] tmp6_reg_213;
wire  signed [31:0] tmp2_fu_119_p2;
reg  signed [31:0] tmp2_reg_218;
wire  signed [31:0] tmp3_fu_124_p2;
reg  signed [31:0] tmp3_reg_223;
wire   [31:0] KER_bound_fu_129_p2;
reg   [31:0] KER_bound_reg_228;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_124_fu_133_p2;
reg   [31:0] tmp_124_reg_234;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond_fu_138_p2;
wire   [31:0] i_2_fu_143_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_1_fu_149_p2;
reg   [0:0] tmp_last_1_reg_248;
wire   [31:0] OFM_bound_fu_154_p2;
reg   [31:0] OFM_bound_reg_253;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_123_fu_158_p2;
reg   [31:0] tmp_123_reg_259;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond7_fu_163_p2;
wire   [31:0] i_12_fu_168_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_last_fu_174_p2;
reg   [0:0] tmp_last_reg_273;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire  signed [31:0] tmp6_fu_114_p1;
wire  signed [31:0] tmp2_fu_119_p0;
wire  signed [31:0] tmp3_fu_124_p0;
wire    ap_CS_fsm_state15;
reg    ap_block_state15;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 out_stream_V_data_V_1_sel_rd = 1'b0;
#0 out_stream_V_data_V_1_sel_wr = 1'b0;
#0 out_stream_V_data_V_1_state = 2'd0;
#0 out_stream_V_last_1_sel_rd = 1'b0;
#0 out_stream_V_last_1_sel_wr = 1'b0;
#0 out_stream_V_last_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_out == 1'b1) & (out_stream_V_data_V_1_vld_out == 1'b1))) begin
            out_stream_V_data_V_1_sel_rd <= ~out_stream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_data_V_1_ack_in == 1'b1) & (out_stream_V_data_V_1_vld_in == 1'b1))) begin
            out_stream_V_data_V_1_sel_wr <= ~out_stream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd2;
        end else if ((((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b0)) | ((out_stream_V_data_V_1_state == 2'd3) & (out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_data_V_1_vld_in == 1'b0) & (out_stream_V_data_V_1_ack_out == 1'b1)) & ~((out_stream_V_data_V_1_ack_out == 1'b0) & (out_stream_V_data_V_1_vld_in == 1'b1)) & (out_stream_V_data_V_1_state == 2'd3)) | ((out_stream_V_data_V_1_state == 2'd1) & (out_stream_V_data_V_1_ack_out == 1'b1)) | ((out_stream_V_data_V_1_state == 2'd2) & (out_stream_V_data_V_1_vld_in == 1'b1)))) begin
            out_stream_V_data_V_1_state <= 2'd3;
        end else begin
            out_stream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_last_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_last_1_ack_out == 1'b1) & (out_stream_V_last_1_vld_out == 1'b1))) begin
            out_stream_V_last_1_sel_rd <= ~out_stream_V_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_last_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_last_1_ack_in == 1'b1) & (out_stream_V_last_1_vld_in == 1'b1))) begin
            out_stream_V_last_1_sel_wr <= ~out_stream_V_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_V_last_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_last_1_state == 2'd2) & (out_stream_V_last_1_vld_in == 1'b0)) | ((out_stream_V_last_1_state == 2'd3) & (out_stream_V_last_1_vld_in == 1'b0) & (out_stream_V_last_1_ack_out == 1'b1)))) begin
            out_stream_V_last_1_state <= 2'd2;
        end else if ((((out_stream_V_last_1_state == 2'd1) & (out_stream_V_last_1_ack_out == 1'b0)) | ((out_stream_V_last_1_state == 2'd3) & (out_stream_V_last_1_ack_out == 1'b0) & (out_stream_V_last_1_vld_in == 1'b1)))) begin
            out_stream_V_last_1_state <= 2'd1;
        end else if (((~((out_stream_V_last_1_vld_in == 1'b0) & (out_stream_V_last_1_ack_out == 1'b1)) & ~((out_stream_V_last_1_ack_out == 1'b0) & (out_stream_V_last_1_vld_in == 1'b1)) & (out_stream_V_last_1_state == 2'd3)) | ((out_stream_V_last_1_state == 2'd1) & (out_stream_V_last_1_ack_out == 1'b1)) | ((out_stream_V_last_1_state == 2'd2) & (out_stream_V_last_1_vld_in == 1'b1)))) begin
            out_stream_V_last_1_state <= 2'd3;
        end else begin
            out_stream_V_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_138_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_reg_72 <= i_2_fu_143_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i1_reg_72 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_reg_83 <= i_12_fu_168_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_83 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        KER_bound_reg_228 <= KER_bound_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        OFM_bound_reg_253 <= OFM_bound_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond7_reg_264 <= exitcond7_fu_163_p2;
        exitcond7_reg_264_pp1_iter1_reg <= exitcond7_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_239 <= exitcond_fu_138_p2;
        exitcond_reg_239_pp0_iter1_reg <= exitcond_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_A == 1'b1)) begin
        out_stream_V_data_V_1_payload_A <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_V_1_load_B == 1'b1)) begin
        out_stream_V_data_V_1_payload_B <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_1_load_A == 1'b1)) begin
        out_stream_V_last_1_payload_A <= out_stream_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_1_load_B == 1'b1)) begin
        out_stream_V_last_1_payload_B <= out_stream_V_last_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_239 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond7_reg_264 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_94 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_99 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_179 == 1'd1) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp2_reg_218 <= tmp2_fu_119_p2;
        tmp3_reg_223 <= tmp3_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_179 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp5_reg_208 <= tmp5_fu_110_p2;
        tmp6_reg_213 <= tmp6_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_123_reg_259 <= tmp_123_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_124_reg_234 <= tmp_124_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_211_reg_183 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_212_reg_190 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_215_reg_196 <= in_stream_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_138_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_1_reg_248 <= tmp_last_1_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_163_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_last_reg_273 <= tmp_last_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_179 <= tmp_s_fu_104_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_138_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7_fu_163_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_239 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond7_reg_264 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        in_stream_V_V_blk_n = in_stream_V_V_empty_n;
    end else begin
        in_stream_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_239 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond7_reg_264 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_stream_V_V_read = 1'b1;
    end else begin
        in_stream_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_239_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((exitcond_reg_239 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond7_reg_264_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond7_reg_264 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        out_stream_TDATA_blk_n = out_stream_V_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_V_data_V_1_sel == 1'b1)) begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B;
    end else begin
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_239 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond7_reg_264 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_stream_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond7_reg_264 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        out_stream_V_last_1_data_in = tmp_last_reg_273;
    end else if (((exitcond_reg_239 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_stream_V_last_1_data_in = tmp_last_1_reg_248;
    end else if (((~((in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((in_stream_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_stream_V_last_1_data_in = 1'd0;
    end else begin
        out_stream_V_last_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_stream_V_last_1_sel == 1'b1)) begin
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_B;
    end else begin
        out_stream_V_last_1_data_out = out_stream_V_last_1_payload_A;
    end
end

always @ (*) begin
    if (((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_reg_239 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((exitcond7_reg_264 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_stream_V_last_1_vld_in = 1'b1;
    end else begin
        out_stream_V_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (in_stream_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_s_reg_179 == 1'd1) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((tmp_s_reg_179 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond7_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((exitcond7_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KER_bound_fu_129_p2 = ($signed(tmp6_reg_213) * $signed(tmp5_reg_208));

assign OFM_bound_fu_154_p2 = ($signed(tmp3_reg_223) * $signed(tmp2_reg_218));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_239 == 1'd0) & (in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((exitcond_reg_239 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((exitcond_reg_239 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((exitcond7_reg_264 == 1'd0) & (in_stream_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((exitcond7_reg_264 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state19_io) | ((exitcond7_reg_264 == 1'd0) & (in_stream_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((in_stream_V_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((exitcond_reg_239 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((exitcond_reg_239 == 1'd0) & (in_stream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state14_io = ((exitcond_reg_239_pp0_iter1_reg == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15 = ((out_stream_V_data_V_1_ack_in == 1'b0) | (out_stream_V_last_1_ack_in == 1'b0));
end

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((exitcond7_reg_264 == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((exitcond7_reg_264 == 1'd0) & (in_stream_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state20_io = ((exitcond7_reg_264_pp1_iter1_reg == 1'd0) & (out_stream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign exitcond7_fu_163_p2 = ((i_reg_83 == OFM_bound_reg_253) ? 1'b1 : 1'b0);

assign exitcond_fu_138_p2 = ((i1_reg_72 == KER_bound_reg_228) ? 1'b1 : 1'b0);

assign i_12_fu_168_p2 = (i_reg_83 + 32'd1);

assign i_2_fu_143_p2 = (i1_reg_72 + 32'd1);

assign out_stream_TDATA = out_stream_V_data_V_1_data_out;

assign out_stream_TLAST = out_stream_V_last_1_data_out;

assign out_stream_TVALID = out_stream_V_last_1_state[1'd0];

assign out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state[1'd1];

assign out_stream_V_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full & ~out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_state_cmp_full & out_stream_V_data_V_1_sel_wr);

assign out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd;

assign out_stream_V_data_V_1_state_cmp_full = ((out_stream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state[1'd0];

assign out_stream_V_last_1_ack_in = out_stream_V_last_1_state[1'd1];

assign out_stream_V_last_1_ack_out = out_stream_TREADY;

assign out_stream_V_last_1_load_A = (out_stream_V_last_1_state_cmp_full & ~out_stream_V_last_1_sel_wr);

assign out_stream_V_last_1_load_B = (out_stream_V_last_1_state_cmp_full & out_stream_V_last_1_sel_wr);

assign out_stream_V_last_1_sel = out_stream_V_last_1_sel_rd;

assign out_stream_V_last_1_state_cmp_full = ((out_stream_V_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_last_1_vld_out = out_stream_V_last_1_state[1'd0];

assign tmp2_fu_119_p0 = reg_94;

assign tmp2_fu_119_p2 = ($signed(tmp2_fu_119_p0) * $signed(tmp_V_215_reg_196));

assign tmp3_fu_124_p0 = reg_99;

assign tmp3_fu_124_p2 = ($signed(tmp3_fu_124_p0) * $signed(tmp_V_215_reg_196));

assign tmp5_fu_110_p2 = ($signed(tmp_V_211_reg_183) * $signed(tmp_V_212_reg_190));

assign tmp6_fu_114_p1 = reg_99;

assign tmp6_fu_114_p2 = ($signed(tmp_V_211_reg_183) * $signed(tmp6_fu_114_p1));

assign tmp_123_fu_158_p2 = ($signed(OFM_bound_reg_253) + $signed(32'd4294967295));

assign tmp_124_fu_133_p2 = ($signed(KER_bound_reg_228) + $signed(32'd4294967295));

assign tmp_last_1_fu_149_p2 = ((i1_reg_72 == tmp_124_reg_234) ? 1'b1 : 1'b0);

assign tmp_last_fu_174_p2 = ((i_reg_83 == tmp_123_reg_259) ? 1'b1 : 1'b0);

assign tmp_s_fu_104_p2 = ((in_stream_V_V_dout == 32'd0) ? 1'b1 : 1'b0);

endmodule //AXI_DMA_MASTER
