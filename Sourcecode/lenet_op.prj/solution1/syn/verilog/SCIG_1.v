// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SCIG_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_pp0_stage0 = 13'd512;
parameter    ap_ST_fsm_state12 = 13'd1024;
parameter    ap_ST_fsm_pp1_stage0 = 13'd2048;
parameter    ap_ST_fsm_state17 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg[31:0] out_V_V_din;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond1_reg_708;
reg   [0:0] tmp_70_reg_717;
reg   [0:0] or_cond2_reg_721;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_699;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] tmp_78_reg_725;
reg   [0:0] tmp_78_reg_725_pp1_iter2_reg;
reg   [31:0] i6_reg_157;
reg   [31:0] inp_reg_168;
reg   [31:0] i_reg_180;
reg   [31:0] inp_6_reg_201;
wire   [0:0] tmp_s_fu_249_p2;
reg   [0:0] tmp_s_reg_608;
reg    ap_block_state1;
reg  signed [31:0] tmp_V_84_reg_612;
reg    ap_block_state2;
reg  signed [31:0] tmp_V_86_reg_617;
reg    ap_block_state3;
reg  signed [31:0] tmp_V_88_reg_623;
reg    ap_block_state4;
reg  signed [31:0] tmp_V_92_reg_628;
reg    ap_block_state6;
wire  signed [31:0] tmp4_fu_255_p2;
reg  signed [31:0] tmp4_reg_633;
reg    ap_block_state8;
wire  signed [31:0] tmp5_fu_259_p2;
reg  signed [31:0] tmp5_reg_638;
wire   [31:0] tmp_68_fu_268_p2;
reg   [31:0] tmp_68_reg_689;
wire   [31:0] KER_bound_fu_288_p2;
reg   [31:0] KER_bound_reg_694;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_292_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_5_fu_297_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond1_fu_303_p2;
wire    ap_block_state13_pp1_stage0_iter0;
reg    ap_predicate_op145_read_state14;
reg    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_state15_pp1_stage0_iter2;
reg    ap_block_state16_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] i_6_fu_308_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_70_fu_321_p2;
wire   [0:0] or_cond2_fu_365_p2;
wire   [0:0] tmp_78_fu_442_p2;
reg   [0:0] tmp_78_reg_725_pp1_iter1_reg;
reg   [31:0] ox_load_1_reg_729;
reg   [31:0] kx_load_reg_734;
wire   [31:0] tmp_fu_460_p2;
reg   [31:0] tmp_reg_739;
wire   [0:0] tmp_83_fu_472_p2;
wire   [0:0] tmp_84_fu_489_p2;
wire   [0:0] tmp_85_fu_509_p2;
wire   [31:0] tmp_79_fu_588_p2;
reg   [31:0] tmp_79_reg_757;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter2;
wire   [13:0] inputBuf_V_address0;
reg    inputBuf_V_ce0;
reg    inputBuf_V_we0;
wire   [13:0] inputBuf_V_address1;
reg    inputBuf_V_ce1;
wire   [7:0] inputBuf_V_q1;
reg   [31:0] ap_phi_mux_inp_phi_fu_172_p4;
reg   [31:0] ap_phi_mux_inp_1_phi_fu_194_p4;
wire   [31:0] inp_2_fu_377_p2;
wire   [31:0] ap_phi_reg_pp1_iter0_inp_1_reg_191;
wire   [31:0] p_inp_1_fu_535_p3;
wire   [31:0] ap_phi_reg_pp1_iter0_inp_6_reg_201;
reg   [7:0] ap_phi_mux_storemerge_phi_fu_226_p4;
wire   [7:0] tmp_82_fu_557_p1;
reg   [7:0] ap_phi_reg_pp1_iter1_storemerge_reg_222;
wire   [7:0] ap_phi_reg_pp1_iter0_storemerge_reg_222;
wire   [63:0] tmp_75_fu_562_p1;
wire   [63:0] tmp_80_fu_593_p1;
reg    ap_block_state5;
reg    ap_block_state7;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] inElem_V_fu_597_p1;
reg    ap_block_pp1_stage0_01001;
wire   [10:0] IFMPadDimSqrt_fu_88;
reg   [31:0] oy_fu_96;
wire   [31:0] p_2_fu_544_p3;
reg   [31:0] ox_fu_100;
wire   [31:0] ox_1_fu_503_p2;
reg   [31:0] ky_fu_104;
wire   [31:0] ky_1_fu_483_p2;
reg   [31:0] inp_j_fu_108;
wire   [31:0] inp_j_1_fu_424_p3;
reg   [31:0] inp_i_fu_112;
wire   [31:0] inp_i_2_fu_416_p3;
reg   [31:0] kx_fu_116;
wire   [31:0] kx_1_fu_466_p2;
wire  signed [31:0] extLd_fu_317_p1;
wire   [31:0] tmp_72_fu_333_p2;
wire   [0:0] tmp_73_fu_347_p2;
wire   [0:0] tmp_74_fu_353_p2;
wire   [0:0] tmp1_fu_359_p2;
wire   [0:0] tmp_81_fu_339_p3;
wire   [31:0] inp_j_2_fu_384_p2;
wire   [31:0] inp_i_1_fu_396_p2;
wire   [0:0] tmp_77_fu_402_p2;
wire   [0:0] tmp_76_fu_390_p2;
wire   [31:0] p_s_fu_408_p3;
wire   [31:0] oy_1_fu_523_p2;
wire   [0:0] tmp_86_fu_529_p2;
wire   [31:0] tmp_89_fu_567_p2;
wire   [31:0] tmp_90_fu_572_p2;
wire   [31:0] tmp2_fu_577_p2;
wire   [31:0] tmp3_fu_583_p2;
wire    ap_CS_fsm_state12;
reg   [12:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_block_pp1;
reg    ap_predicate_op151_store_state14;
reg    ap_enable_operation_151;
reg    ap_enable_state14_pp1_iter1_stage0;
reg    ap_enable_operation_159;
reg    ap_enable_state15_pp1_iter2_stage0;
reg    ap_enable_operation_160;
reg    ap_enable_state16_pp1_iter3_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_437;
reg    ap_condition_393;
reg    ap_condition_250;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

SCIG_1_inputBuf_V #(
    .DataWidth( 8 ),
    .AddressRange( 10500 ),
    .AddressWidth( 14 ))
inputBuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inputBuf_V_address0),
    .ce0(inputBuf_V_ce0),
    .we0(inputBuf_V_we0),
    .d0(ap_phi_mux_storemerge_phi_fu_226_p4),
    .address1(inputBuf_V_address1),
    .ce1(inputBuf_V_ce1),
    .q1(inputBuf_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_250)) begin
        if ((1'b1 == ap_condition_393)) begin
            ap_phi_reg_pp1_iter1_storemerge_reg_222 <= 8'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp1_iter1_storemerge_reg_222 <= ap_phi_reg_pp1_iter0_storemerge_reg_222;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_292_p2 == 1'd0))) begin
        i6_reg_157 <= i_5_fu_297_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i6_reg_157 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_fu_303_p2 == 1'd0))) begin
        i_reg_180 <= i_6_fu_308_p2;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
        i_reg_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_78_fu_442_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_84_fu_489_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_85_fu_509_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0)))) begin
        inp_6_reg_201 <= ap_phi_mux_inp_1_phi_fu_194_p4;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_85_fu_509_p2 == 1'd1) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0))) begin
        inp_6_reg_201 <= p_inp_1_fu_535_p3;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        inp_6_reg_201 <= ap_phi_reg_pp1_iter0_inp_6_reg_201;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_70_fu_321_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0))) begin
        inp_i_fu_112 <= inp_i_2_fu_416_p3;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
        inp_i_fu_112 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_70_fu_321_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0))) begin
        inp_j_fu_108 <= inp_j_1_fu_424_p3;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
        inp_j_fu_108 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_708 == 1'd0))) begin
        inp_reg_168 <= inp_6_reg_201;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
        inp_reg_168 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0))) begin
        kx_fu_116 <= kx_1_fu_466_p2;
    end else if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_84_fu_489_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_85_fu_509_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_85_fu_509_p2 == 1'd1) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1)))) begin
        kx_fu_116 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_84_fu_489_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0))) begin
        ky_fu_104 <= ky_1_fu_483_p2;
    end else if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1)))) begin
        ky_fu_104 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (tmp_85_fu_509_p2 == 1'd0) & (exitcond1_fu_303_p2 == 1'd0))) begin
        ox_fu_100 <= ox_1_fu_503_p2;
    end else if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_85_fu_509_p2 == 1'd1) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1)))) begin
        ox_fu_100 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_85_fu_509_p2 == 1'd1) & (tmp_84_fu_489_p2 == 1'd1) & (tmp_83_fu_472_p2 == 1'd1) & (tmp_78_fu_442_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0))) begin
        oy_fu_96 <= p_2_fu_544_p3;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
        oy_fu_96 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        KER_bound_reg_694 <= KER_bound_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond1_reg_708 <= exitcond1_fu_303_p2;
        tmp_78_reg_725_pp1_iter1_reg <= tmp_78_reg_725;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_699 <= exitcond_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_78_fu_442_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0))) begin
        kx_load_reg_734 <= kx_fu_116;
        ox_load_1_reg_729 <= ox_fu_100;
        tmp_reg_739 <= tmp_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_70_fu_321_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0))) begin
        or_cond2_reg_721 <= or_cond2_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd0))) begin
        tmp4_reg_633 <= tmp4_fu_255_p2;
        tmp5_reg_638 <= tmp5_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
        tmp_68_reg_689[31 : 3] <= tmp_68_fu_268_p2[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_fu_303_p2 == 1'd0))) begin
        tmp_70_reg_717 <= tmp_70_fu_321_p2;
        tmp_78_reg_725 <= tmp_78_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        tmp_78_reg_725_pp1_iter2_reg <= tmp_78_reg_725_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_78_reg_725 == 1'd1))) begin
        tmp_79_reg_757 <= tmp_79_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_84_reg_612 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_86_reg_617 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_88_reg_623 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_92_reg_628 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_608 <= tmp_s_fu_249_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_292_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_303_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_437)) begin
        if ((tmp_70_fu_321_p2 == 1'd0)) begin
            ap_phi_mux_inp_1_phi_fu_194_p4 = ap_phi_mux_inp_phi_fu_172_p4;
        end else if ((tmp_70_fu_321_p2 == 1'd1)) begin
            ap_phi_mux_inp_1_phi_fu_194_p4 = inp_2_fu_377_p2;
        end else begin
            ap_phi_mux_inp_1_phi_fu_194_p4 = ap_phi_reg_pp1_iter0_inp_1_reg_191;
        end
    end else begin
        ap_phi_mux_inp_1_phi_fu_194_p4 = ap_phi_reg_pp1_iter0_inp_1_reg_191;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_reg_708 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_inp_phi_fu_172_p4 = inp_6_reg_201;
    end else begin
        ap_phi_mux_inp_phi_fu_172_p4 = inp_reg_168;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_70_reg_717 == 1'd1) & (or_cond2_reg_721 == 1'd0) & (exitcond1_reg_708 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_storemerge_phi_fu_226_p4 = tmp_82_fu_557_p1;
    end else begin
        ap_phi_mux_storemerge_phi_fu_226_p4 = ap_phi_reg_pp1_iter1_storemerge_reg_222;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_reg_699 == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_70_reg_717 == 1'd1) & (or_cond2_reg_721 == 1'd0) & (exitcond1_reg_708 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_699 == 1'd0)) | ((ap_predicate_op145_read_state14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        inputBuf_V_ce0 = 1'b1;
    end else begin
        inputBuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        inputBuf_V_ce1 = 1'b1;
    end else begin
        inputBuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_70_reg_717 == 1'd1) & (exitcond1_reg_708 == 1'd0))) begin
        inputBuf_V_we0 = 1'b1;
    end else begin
        inputBuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_reg_699 == 1'd0)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (tmp_78_reg_725_pp1_iter2_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (tmp_78_reg_725_pp1_iter2_reg == 1'd1))) begin
        out_V_V_din = inElem_V_fu_597_p1;
    end else if (((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_699 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        out_V_V_din = in_V_V_dout;
    end else begin
        out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (tmp_78_reg_725_pp1_iter2_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_699 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (tmp_s_reg_608 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond1_fu_303_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond1_fu_303_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IFMPadDimSqrt_fu_88 = 11'd784;

assign KER_bound_fu_288_p2 = ($signed(tmp5_reg_638) * $signed(tmp4_reg_633));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_pp0 = ((1'b1 == ap_block_pp0_stage0_subdone) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_699 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_699 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_699 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_699 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_699 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_699 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1 = ((1'b1 == ap_block_pp1_stage0_subdone) & (ap_ST_fsm_pp1_stage0 == ap_CS_fsm));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (tmp_78_reg_725_pp1_iter2_reg == 1'd1)) | ((in_V_V_empty_n == 1'b0) & (ap_predicate_op145_read_state14 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (tmp_78_reg_725_pp1_iter2_reg == 1'd1)) | ((in_V_V_empty_n == 1'b0) & (ap_predicate_op145_read_state14 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (tmp_78_reg_725_pp1_iter2_reg == 1'd1)) | ((in_V_V_empty_n == 1'b0) & (ap_predicate_op145_read_state14 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (((out_V_V_full_n == 1'b0) & (exitcond_reg_699 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_699 == 1'd0)));
end

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp1_stage0_iter1 = ((in_V_V_empty_n == 1'b0) & (ap_predicate_op145_read_state14 == 1'b1));
end

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp1_stage0_iter3 = ((out_V_V_full_n == 1'b0) & (tmp_78_reg_725_pp1_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_block_state2 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_250 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_393 = ((or_cond2_fu_365_p2 == 1'd1) & (tmp_70_fu_321_p2 == 1'd1) & (exitcond1_fu_303_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_437 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond1_fu_303_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0));
end

always @ (*) begin
    ap_enable_operation_151 = (ap_predicate_op151_store_state14 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_159 = (tmp_78_reg_725_pp1_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_160 = (tmp_78_reg_725_pp1_iter2_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_enable_state14_pp1_iter1_stage0 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_enable_state15_pp1_iter2_stage0 = ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_enable_state16_pp1_iter3_stage0 = ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_phi_reg_pp1_iter0_inp_1_reg_191 = 'bx;

assign ap_phi_reg_pp1_iter0_inp_6_reg_201 = 'bx;

assign ap_phi_reg_pp1_iter0_storemerge_reg_222 = 'bx;

always @ (*) begin
    ap_predicate_op145_read_state14 = ((tmp_70_reg_717 == 1'd1) & (or_cond2_reg_721 == 1'd0) & (exitcond1_reg_708 == 1'd0));
end

always @ (*) begin
    ap_predicate_op151_store_state14 = ((tmp_70_reg_717 == 1'd1) & (exitcond1_reg_708 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign exitcond1_fu_303_p2 = ((i_reg_180 == tmp_68_reg_689) ? 1'b1 : 1'b0);

assign exitcond_fu_292_p2 = ((i6_reg_157 == KER_bound_reg_694) ? 1'b1 : 1'b0);

assign extLd_fu_317_p1 = $signed(IFMPadDimSqrt_fu_88);

assign i_5_fu_297_p2 = (i6_reg_157 + 32'd1);

assign i_6_fu_308_p2 = (i_reg_180 + 32'd1);

assign inElem_V_fu_597_p1 = $signed(inputBuf_V_q1);

assign inp_2_fu_377_p2 = (ap_phi_mux_inp_phi_fu_172_p4 + 32'd1);

assign inp_i_1_fu_396_p2 = (inp_i_fu_112 + 32'd1);

assign inp_i_2_fu_416_p3 = ((tmp_76_fu_390_p2[0:0] === 1'b1) ? p_s_fu_408_p3 : inp_i_fu_112);

assign inp_j_1_fu_424_p3 = ((tmp_76_fu_390_p2[0:0] === 1'b1) ? 32'd0 : inp_j_2_fu_384_p2);

assign inp_j_2_fu_384_p2 = (inp_j_fu_108 + 32'd1);

assign inputBuf_V_address0 = tmp_75_fu_562_p1;

assign inputBuf_V_address1 = tmp_80_fu_593_p1;

assign kx_1_fu_466_p2 = (32'd1 + kx_fu_116);

assign ky_1_fu_483_p2 = (ky_fu_104 + 32'd1);

assign or_cond2_fu_365_p2 = (tmp_81_fu_339_p3 | tmp1_fu_359_p2);

assign ox_1_fu_503_p2 = (ox_fu_100 + 32'd1);

assign oy_1_fu_523_p2 = (oy_fu_96 + 32'd1);

assign p_2_fu_544_p3 = ((tmp_86_fu_529_p2[0:0] === 1'b1) ? 32'd0 : oy_1_fu_523_p2);

assign p_inp_1_fu_535_p3 = ((tmp_86_fu_529_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_inp_1_phi_fu_194_p4);

assign p_s_fu_408_p3 = ((tmp_77_fu_402_p2[0:0] === 1'b1) ? 32'd0 : inp_i_1_fu_396_p2);

assign start_out = real_start;

assign tmp1_fu_359_p2 = (tmp_74_fu_353_p2 | tmp_73_fu_347_p2);

assign tmp2_fu_577_p2 = (tmp_89_fu_567_p2 - tmp_90_fu_572_p2);

assign tmp3_fu_583_p2 = (kx_load_reg_734 + tmp2_fu_577_p2);

assign tmp4_fu_255_p2 = ($signed(tmp_V_86_reg_617) * $signed(tmp_V_86_reg_617));

assign tmp5_fu_259_p2 = ($signed(tmp_V_88_reg_623) * $signed(tmp_V_92_reg_628));

assign tmp_68_fu_268_p2 = ($signed(tmp_V_84_reg_612) * $signed('h38E8));

assign tmp_70_fu_321_p2 = ((ap_phi_mux_inp_phi_fu_172_p4 < extLd_fu_317_p1) ? 1'b1 : 1'b0);

assign tmp_72_fu_333_p2 = (inp_j_fu_108 | inp_i_fu_112);

assign tmp_73_fu_347_p2 = ((inp_i_fu_112 > 32'd27) ? 1'b1 : 1'b0);

assign tmp_74_fu_353_p2 = ((inp_j_fu_108 > 32'd27) ? 1'b1 : 1'b0);

assign tmp_75_fu_562_p1 = inp_reg_168;

assign tmp_76_fu_390_p2 = ((inp_j_2_fu_384_p2 == 32'd28) ? 1'b1 : 1'b0);

assign tmp_77_fu_402_p2 = ((inp_i_1_fu_396_p2 == 32'd28) ? 1'b1 : 1'b0);

assign tmp_78_fu_442_p2 = ((ap_phi_mux_inp_1_phi_fu_194_p4 > 32'd168) ? 1'b1 : 1'b0);

assign tmp_79_fu_588_p2 = (tmp3_fu_583_p2 + ox_load_1_reg_729);

assign tmp_80_fu_593_p1 = tmp_79_reg_757;

assign tmp_81_fu_339_p3 = tmp_72_fu_333_p2[32'd31];

assign tmp_82_fu_557_p1 = in_V_V_dout[7:0];

assign tmp_83_fu_472_p2 = ((kx_1_fu_466_p2 == 32'd5) ? 1'b1 : 1'b0);

assign tmp_84_fu_489_p2 = ((ky_1_fu_483_p2 == 32'd5) ? 1'b1 : 1'b0);

assign tmp_85_fu_509_p2 = ((ox_1_fu_503_p2 == 32'd24) ? 1'b1 : 1'b0);

assign tmp_86_fu_529_p2 = ((oy_1_fu_523_p2 == 32'd24) ? 1'b1 : 1'b0);

assign tmp_89_fu_567_p2 = tmp_reg_739 << 32'd5;

assign tmp_90_fu_572_p2 = tmp_reg_739 << 32'd2;

assign tmp_fu_460_p2 = (oy_fu_96 + ky_fu_104);

assign tmp_s_fu_249_p2 = ((in_V_V_dout == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_68_reg_689[2:0] <= 3'b000;
end

endmodule //SCIG_1
