// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_2u_20u_24u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_pp0_stage0 = 51'd1099511627776;
parameter    ap_ST_fsm_state43 = 51'd2199023255552;
parameter    ap_ST_fsm_state44 = 51'd4398046511104;
parameter    ap_ST_fsm_state45 = 51'd8796093022208;
parameter    ap_ST_fsm_pp1_stage0 = 51'd17592186044416;
parameter    ap_ST_fsm_pp1_stage1 = 51'd35184372088832;
parameter    ap_ST_fsm_state49 = 51'd70368744177664;
parameter    ap_ST_fsm_pp2_stage0 = 51'd140737488355328;
parameter    ap_ST_fsm_state52 = 51'd281474976710656;
parameter    ap_ST_fsm_pp3_stage0 = 51'd562949953421312;
parameter    ap_ST_fsm_state56 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg[31:0] out_V_V_din;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] IFMCH_curr_1;
reg   [31:0] IFMDim_curr_1;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond_flatten_reg_1273;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_1241;
reg    out_V_V_blk_n;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond_flatten4_reg_1330;
reg   [0:0] exitcond_flatten4_reg_1330_pp3_iter1_reg;
reg   [31:0] i3_reg_518;
reg   [32:0] indvar_flatten_reg_562;
reg   [31:0] ch_reg_573;
reg   [4:0] ch2_reg_584;
reg   [62:0] indvar_flatten4_reg_595;
reg   [30:0] outpix_reg_606;
reg   [31:0] outch_reg_617;
reg   [31:0] reg_628;
reg    ap_block_state1;
reg    ap_block_state47_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [31:0] tmp_V_21_reg_1143;
reg    ap_block_state2;
reg  signed [31:0] tmp_V_23_reg_1148;
reg    ap_block_state3;
reg  signed [31:0] tmp_V_25_reg_1154;
reg    ap_block_state4;
reg  signed [31:0] tmp_V_29_reg_1159;
reg    ap_block_state6;
reg   [31:0] tmp_V_31_reg_1166;
reg    ap_block_state7;
wire   [4:0] j_2_fu_659_p2;
reg   [4:0] j_2_reg_1177;
wire    ap_CS_fsm_state9;
wire  signed [8:0] tmp_32_fu_685_p2;
reg  signed [8:0] tmp_32_reg_1182;
wire   [0:0] tmp_17_fu_653_p2;
wire   [0:0] tmp_18_fu_696_p2;
reg   [0:0] tmp_18_reg_1197;
wire  signed [31:0] tmp1_fu_812_p2;
reg  signed [31:0] tmp1_reg_1201;
wire    ap_CS_fsm_state39;
wire  signed [31:0] tmp2_fu_816_p2;
reg  signed [31:0] tmp2_reg_1206;
wire   [30:0] tmp_9_fu_824_p4;
reg   [30:0] tmp_9_reg_1211;
wire   [32:0] tmp_44_fu_834_p3;
reg   [32:0] tmp_44_reg_1216;
wire   [31:0] tmp_45_fu_842_p3;
reg   [31:0] tmp_45_reg_1221;
wire   [62:0] bound3_fu_858_p2;
reg   [62:0] bound3_reg_1226;
wire   [62:0] bound5_fu_867_p2;
reg   [62:0] bound5_reg_1231;
wire   [31:0] KER_bound_fu_873_p2;
reg   [31:0] KER_bound_reg_1236;
wire    ap_CS_fsm_state40;
wire   [0:0] exitcond_fu_877_p2;
wire    ap_block_state41_pp0_stage0_iter0;
reg    ap_block_state42_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_882_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [62:0] indvar_flatten_next3_fu_893_p2;
reg   [62:0] indvar_flatten_next3_reg_1253;
wire    ap_CS_fsm_state44;
wire   [0:0] exitcond_flatten8_fu_899_p2;
wire    ap_CS_fsm_state45;
wire   [31:0] indvar_flatten_next7_fu_904_p2;
reg   [31:0] indvar_flatten_next7_reg_1262;
wire   [30:0] xp_mid2_fu_915_p3;
reg   [30:0] xp_mid2_reg_1267;
wire   [0:0] exitcond_flatten_fu_923_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state46_pp1_stage0_iter0;
wire    ap_block_state48_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [32:0] indvar_flatten_next_fu_928_p2;
reg   [32:0] indvar_flatten_next_reg_1277;
wire   [31:0] ch_mid2_fu_940_p3;
reg   [31:0] ch_mid2_reg_1282;
reg   [4:0] acc_addr_8_reg_1288;
wire   [31:0] ch_3_fu_952_p2;
reg   [31:0] ch_3_reg_1294;
wire   [8:0] tmp_51_fu_972_p1;
reg   [8:0] tmp_51_reg_1299;
wire    ap_CS_fsm_state49;
wire   [0:0] tmp_25_fu_975_p2;
reg   [0:0] tmp_25_reg_1304;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state50_pp2_stage0_iter0;
wire    ap_block_state51_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [4:0] ch_4_fu_981_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [7:0] buf_addr_6_reg_1313;
reg   [4:0] acc_addr_7_reg_1319;
wire   [30:0] xp_2_fu_1043_p2;
wire    ap_CS_fsm_state52;
wire   [0:0] exitcond_flatten4_fu_1048_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state53_pp3_stage0_iter0;
wire    ap_block_state54_pp3_stage0_iter1;
reg    ap_block_state55_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [62:0] indvar_flatten_next4_fu_1053_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [30:0] tmp_22_mid2_v_fu_1079_p3;
reg   [30:0] tmp_22_mid2_v_reg_1339;
reg   [7:0] buf_addr_5_reg_1344;
reg   [7:0] buf_addr_5_reg_1344_pp3_iter1_reg;
wire   [31:0] outch_2_fu_1137_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state41;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state46;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage1_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state50;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state53;
reg    ap_enable_reg_pp3_iter1;
reg   [7:0] buf_address0;
reg    buf_ce0;
wire   [31:0] buf_q0;
reg   [7:0] buf_address1;
reg    buf_ce1;
reg    buf_we1;
reg   [31:0] buf_d1;
reg   [4:0] acc_address0;
reg    acc_ce0;
wire   [31:0] acc_q0;
reg   [4:0] acc_address1;
reg    acc_ce1;
reg    acc_we1;
reg   [31:0] acc_d1;
reg   [31:0] IFMCH_curr_1_loc_reg_497;
reg    ap_block_state8;
wire   [0:0] tmp_s_fu_632_p2;
reg   [4:0] j_reg_507;
wire    ap_CS_fsm_state20;
reg   [62:0] indvar_flatten3_reg_529;
wire    ap_CS_fsm_state56;
reg   [31:0] indvar_flatten6_reg_540;
wire   [0:0] exitcond_flatten3_fu_888_p2;
reg   [30:0] xp_reg_551;
reg   [32:0] ap_phi_mux_indvar_flatten_phi_fu_566_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] ap_phi_mux_ch_phi_fu_577_p4;
reg   [30:0] ap_phi_mux_outpix_phi_fu_610_p4;
wire  signed [63:0] tmp_34_cast_fu_691_p1;
wire   [63:0] tmp_35_cast_fu_707_p1;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_36_cast_fu_717_p1;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_37_cast_fu_727_p1;
wire    ap_CS_fsm_state12;
wire  signed [63:0] tmp_38_cast_fu_737_p1;
wire    ap_CS_fsm_state13;
wire  signed [63:0] tmp_39_cast_fu_747_p1;
wire    ap_CS_fsm_state14;
wire  signed [63:0] tmp_40_cast_fu_757_p1;
wire    ap_CS_fsm_state15;
wire  signed [63:0] tmp_41_cast_fu_767_p1;
wire    ap_CS_fsm_state16;
wire  signed [63:0] tmp_42_cast_fu_777_p1;
wire    ap_CS_fsm_state17;
wire  signed [63:0] tmp_43_cast_fu_787_p1;
wire    ap_CS_fsm_state18;
wire  signed [63:0] tmp_44_cast_fu_797_p1;
wire    ap_CS_fsm_state19;
wire  signed [63:0] tmp_45_cast_fu_807_p1;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire   [63:0] tmp_23_fu_948_p1;
wire  signed [63:0] tmp_56_cast_fu_1023_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] tmp_27_fu_987_p1;
wire  signed [63:0] tmp_52_cast_fu_1132_p1;
wire   [63:0] tmp_20_fu_1091_p1;
reg    ap_block_state5;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp3_stage0_01001;
wire   [31:0] tmp_29_fu_1034_p3;
wire   [31:0] acc_load_2_valIn_V_fu_963_p3;
wire   [6:0] tmp_31_fu_673_p3;
wire   [8:0] tmp_30_fu_665_p3;
wire   [8:0] p_shl1_cast_fu_681_p1;
wire   [8:0] tmp_33_fu_702_p2;
wire   [8:0] tmp_34_fu_712_p2;
wire   [8:0] tmp_35_fu_722_p2;
wire   [8:0] tmp_36_fu_732_p2;
wire   [8:0] tmp_37_fu_742_p2;
wire   [8:0] tmp_38_fu_752_p2;
wire   [8:0] tmp_39_fu_762_p2;
wire   [8:0] tmp_40_fu_772_p2;
wire   [8:0] tmp_41_fu_782_p2;
wire   [8:0] tmp_42_fu_792_p2;
wire   [8:0] tmp_43_fu_802_p2;
wire   [30:0] bound3_fu_858_p0;
wire   [62:0] cast9_fu_850_p1;
wire   [31:0] bound3_fu_858_p1;
wire   [31:0] bound5_fu_867_p0;
wire   [30:0] bound5_fu_867_p1;
wire   [0:0] exitcond4_fu_910_p2;
wire   [0:0] exitcond6_fu_934_p2;
wire   [0:0] tmp_24_fu_957_p2;
wire   [6:0] tmp_53_fu_1000_p3;
wire   [8:0] tmp_52_fu_992_p3;
wire   [8:0] p_shl5_cast_fu_1008_p1;
wire   [8:0] tmp_54_fu_1012_p2;
wire   [8:0] tmp_55_fu_1018_p2;
wire   [0:0] tmp_28_fu_1028_p2;
wire   [0:0] exitcond5_fu_1065_p2;
wire   [30:0] outpix_2_fu_1059_p2;
wire   [31:0] outch_mid2_fu_1071_p3;
wire   [4:0] tmp_47_fu_1096_p1;
wire   [6:0] tmp_48_fu_1108_p1;
wire   [8:0] p_shl2_cast_fu_1100_p3;
wire   [8:0] p_shl3_cast_fu_1112_p3;
wire   [8:0] tmp_46_fu_1087_p1;
wire   [8:0] tmp_49_fu_1120_p2;
wire   [8:0] tmp_50_fu_1126_p2;
wire    ap_CS_fsm_state43;
reg   [50:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [62:0] bound3_fu_858_p10;
wire   [62:0] bound5_fu_867_p00;
reg    ap_condition_497;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 51'd1;
#0 IFMCH_curr_1 = 32'd0;
#0 IFMDim_curr_1 = 32'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

pool_2u_20u_24u_s0iy #(
    .DataWidth( 32 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .q0(buf_q0),
    .address1(buf_address1),
    .ce1(buf_ce1),
    .we1(buf_we1),
    .d1(buf_d1)
);

pool_2u_20u_24u_s1iI #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
acc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_address0),
    .ce0(acc_ce0),
    .q0(acc_q0),
    .address1(acc_address1),
    .ce1(acc_ce1),
    .we1(acc_we1),
    .d1(acc_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state41) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state41))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state41);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state40)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state46) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state45) & (exitcond_flatten8_fu_899_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state45) & (exitcond_flatten8_fu_899_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state50) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state50))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state50);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state53) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((exitcond_flatten8_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state53)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state53);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((exitcond_flatten8_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_497)) begin
        if ((tmp_s_fu_632_p2 == 1'd0)) begin
            IFMCH_curr_1_loc_reg_497 <= IFMCH_curr_1;
        end else if ((tmp_s_fu_632_p2 == 1'd1)) begin
            IFMCH_curr_1_loc_reg_497 <= tmp_V_29_reg_1159;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        ch2_reg_584 <= 5'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_25_fu_975_p2 == 1'd0))) begin
        ch2_reg_584 <= ch_4_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1273 == 1'd0))) begin
        ch_reg_573 <= ch_3_reg_1294;
    end else if (((1'b1 == ap_CS_fsm_state45) & (exitcond_flatten8_fu_899_p2 == 1'd0))) begin
        ch_reg_573 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_877_p2 == 1'd0))) begin
        i3_reg_518 <= i_fu_882_p2;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        i3_reg_518 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        indvar_flatten3_reg_529 <= indvar_flatten_next3_reg_1253;
    end else if (((tmp_18_reg_1197 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        indvar_flatten3_reg_529 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        indvar_flatten4_reg_595 <= 63'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1048_p2 == 1'd0))) begin
        indvar_flatten4_reg_595 <= indvar_flatten_next4_fu_1053_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (exitcond_flatten3_fu_888_p2 == 1'd0))) begin
        indvar_flatten6_reg_540 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        indvar_flatten6_reg_540 <= indvar_flatten_next7_reg_1262;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1273 == 1'd0))) begin
        indvar_flatten_reg_562 <= indvar_flatten_next_reg_1277;
    end else if (((1'b1 == ap_CS_fsm_state45) & (exitcond_flatten8_fu_899_p2 == 1'd0))) begin
        indvar_flatten_reg_562 <= 33'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_reg_507 <= j_2_reg_1177;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        j_reg_507 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        outch_reg_617 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1048_p2 == 1'd0))) begin
        outch_reg_617 <= outch_2_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        outpix_reg_606 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_reg_1330 == 1'd0))) begin
        outpix_reg_606 <= tmp_22_mid2_v_reg_1339;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (exitcond_flatten3_fu_888_p2 == 1'd0))) begin
        xp_reg_551 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        xp_reg_551 <= xp_2_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (tmp_s_fu_632_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        IFMCH_curr_1 <= tmp_V_29_reg_1159;
        IFMDim_curr_1 <= tmp_V_31_reg_1166;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        KER_bound_reg_1236 <= KER_bound_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_25_fu_975_p2 == 1'd0))) begin
        acc_addr_7_reg_1319 <= tmp_27_fu_987_p1;
        buf_addr_6_reg_1313 <= tmp_56_cast_fu_1023_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1273 == 1'd0))) begin
        acc_addr_8_reg_1288 <= tmp_23_fu_948_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_1197 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        bound3_reg_1226 <= bound3_fu_858_p2;
        bound5_reg_1231 <= bound5_fu_867_p2;
        tmp_44_reg_1216[32 : 1] <= tmp_44_fu_834_p3[32 : 1];
        tmp_45_reg_1221[31 : 1] <= tmp_45_fu_842_p3[31 : 1];
        tmp_9_reg_1211 <= {{IFMDim_curr_1[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1048_p2 == 1'd0))) begin
        buf_addr_5_reg_1344 <= tmp_52_cast_fu_1132_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        buf_addr_5_reg_1344_pp3_iter1_reg <= buf_addr_5_reg_1344;
        exitcond_flatten4_reg_1330 <= exitcond_flatten4_fu_1048_p2;
        exitcond_flatten4_reg_1330_pp3_iter1_reg <= exitcond_flatten4_reg_1330;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1273 == 1'd0))) begin
        ch_3_reg_1294 <= ch_3_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_923_p2 == 1'd0))) begin
        ch_mid2_reg_1282 <= ch_mid2_fu_940_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_1273 <= exitcond_flatten_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_1241 <= exitcond_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        indvar_flatten_next3_reg_1253 <= indvar_flatten_next3_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten_next7_reg_1262 <= indvar_flatten_next7_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_1277 <= indvar_flatten_next_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_reg_1177 <= j_2_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1273 == 1'd0)))) begin
        reg_628 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (tmp_18_reg_1197 == 1'd0))) begin
        tmp1_reg_1201 <= tmp1_fu_812_p2;
        tmp2_reg_1206 <= tmp2_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_18_reg_1197 <= tmp_18_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1048_p2 == 1'd0))) begin
        tmp_22_mid2_v_reg_1339 <= tmp_22_mid2_v_fu_1079_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_25_reg_1304 <= tmp_25_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_17_fu_653_p2 == 1'd0))) begin
        tmp_32_reg_1182[8 : 2] <= tmp_32_fu_685_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_51_reg_1299 <= tmp_51_fu_972_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_21_reg_1143 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_23_reg_1148 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_25_reg_1154 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_29_reg_1159 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_31_reg_1166 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (exitcond_flatten8_fu_899_p2 == 1'd0))) begin
        xp_mid2_reg_1267 <= xp_mid2_fu_915_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address0 = tmp_27_fu_987_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        acc_address0 = tmp_23_fu_948_p1;
    end else begin
        acc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        acc_address1 = tmp_20_fu_1091_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address1 = acc_addr_7_reg_1319;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_address1 = acc_addr_8_reg_1288;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        acc_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        acc_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        acc_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        acc_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        acc_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        acc_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        acc_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        acc_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        acc_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        acc_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        acc_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        acc_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        acc_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        acc_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        acc_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        acc_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        acc_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        acc_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_address1 = 64'd0;
    end else begin
        acc_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        acc_ce0 = 1'b1;
    end else begin
        acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        acc_ce1 = 1'b1;
    end else begin
        acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_d1 = acc_load_2_valIn_V_fu_963_p3;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        acc_d1 = 32'd4293967297;
    end else begin
        acc_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten4_fu_1048_p2 == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_25_reg_1304 == 1'd0)) | ((tmp_17_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1273 == 1'd0)))) begin
        acc_we1 = 1'b1;
    end else begin
        acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_877_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state41 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state41 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_923_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state46 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state46 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_25_fu_975_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_1048_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state53 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state53 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1273 == 1'd0))) begin
        ap_phi_mux_ch_phi_fu_577_p4 = ch_3_reg_1294;
    end else begin
        ap_phi_mux_ch_phi_fu_577_p4 = ch_reg_573;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1273 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_566_p4 = indvar_flatten_next_reg_1277;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_566_p4 = indvar_flatten_reg_562;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (exitcond_flatten4_reg_1330 == 1'd0))) begin
        ap_phi_mux_outpix_phi_fu_610_p4 = tmp_22_mid2_v_reg_1339;
    end else begin
        ap_phi_mux_outpix_phi_fu_610_p4 = outpix_reg_606;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_address0 = buf_addr_5_reg_1344;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address0 = tmp_56_cast_fu_1023_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_address1 = buf_addr_5_reg_1344_pp3_iter1_reg;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address1 = buf_addr_6_reg_1313;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_address1 = tmp_45_cast_fu_807_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf_address1 = tmp_44_cast_fu_797_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buf_address1 = tmp_43_cast_fu_787_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_address1 = tmp_42_cast_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_address1 = tmp_41_cast_fu_767_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_address1 = tmp_40_cast_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buf_address1 = tmp_39_cast_fu_747_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buf_address1 = tmp_38_cast_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_address1 = tmp_37_cast_fu_727_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_address1 = tmp_36_cast_fu_717_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_address1 = tmp_35_cast_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_address1 = tmp_34_cast_fu_691_p1;
    end else begin
        buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        buf_ce1 = 1'b1;
    end else begin
        buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_d1 = tmp_29_fu_1034_p3;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0)))) begin
        buf_d1 = 32'd4293967297;
    end else begin
        buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_25_reg_1304 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_17_fu_653_p2 == 1'd0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0)))) begin
        buf_we1 = 1'b1;
    end else begin
        buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_reg_1241 == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1273 == 1'd0) & (1'b0 == ap_block_pp1_stage1)))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_1241 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1273 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_reg_1241 == 1'd0)))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0))) begin
        out_V_V_din = buf_q0;
    end else if (((~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_1241 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_din = in_V_V_dout;
    end else begin
        out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_1241 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_17_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((tmp_18_reg_1197 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_877_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_877_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state44 : begin
            if (((exitcond_flatten3_fu_888_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((exitcond_flatten8_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_923_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_923_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_25_fu_975_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_25_fu_975_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten4_fu_1048_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten4_fu_1048_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KER_bound_fu_873_p2 = ($signed(tmp2_reg_1206) * $signed(tmp1_reg_1201));

assign acc_load_2_valIn_V_fu_963_p3 = ((tmp_24_fu_957_p2[0:0] === 1'b1) ? acc_q0 : reg_628);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_1241 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1241 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_1241 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1241 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_1241 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1241 == 1'd0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_reg_1273 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_reg_1273 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

assign ap_block_state41_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_pp0_stage0_iter1 = (((out_V_V_full_n == 1'b0) & (exitcond_reg_1241 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1241 == 1'd0)));
end

assign ap_block_state46_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state47_pp1_stage1_iter0 = ((in_V_V_empty_n == 1'b0) & (exitcond_flatten_reg_1273 == 1'd0));
end

assign ap_block_state48_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

assign ap_block_state50_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_pp3_stage0_iter2 = ((out_V_V_full_n == 1'b0) & (exitcond_flatten4_reg_1330_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_497 = (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound3_fu_858_p0 = cast9_fu_850_p1;

assign bound3_fu_858_p1 = bound3_fu_858_p10;

assign bound3_fu_858_p10 = IFMCH_curr_1_loc_reg_497;

assign bound3_fu_858_p2 = (bound3_fu_858_p0 * bound3_fu_858_p1);

assign bound5_fu_867_p0 = bound5_fu_867_p00;

assign bound5_fu_867_p00 = tmp_V_21_reg_1143;

assign bound5_fu_867_p1 = cast9_fu_850_p1;

assign bound5_fu_867_p2 = (bound5_fu_867_p0 * bound5_fu_867_p1);

assign cast9_fu_850_p1 = tmp_9_fu_824_p4;

assign ch_3_fu_952_p2 = (ch_mid2_reg_1282 + 32'd1);

assign ch_4_fu_981_p2 = (ch2_reg_584 + 5'd1);

assign ch_mid2_fu_940_p3 = ((exitcond6_fu_934_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_ch_phi_fu_577_p4);

assign exitcond4_fu_910_p2 = ((xp_reg_551 == tmp_9_reg_1211) ? 1'b1 : 1'b0);

assign exitcond5_fu_1065_p2 = ((outch_reg_617 == IFMCH_curr_1_loc_reg_497) ? 1'b1 : 1'b0);

assign exitcond6_fu_934_p2 = ((ap_phi_mux_ch_phi_fu_577_p4 == IFMCH_curr_1_loc_reg_497) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_888_p2 = ((indvar_flatten3_reg_529 == bound5_reg_1231) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_1048_p2 = ((indvar_flatten4_reg_595 == bound3_reg_1226) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_899_p2 = ((indvar_flatten6_reg_540 == tmp_45_reg_1221) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_923_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_566_p4 == tmp_44_reg_1216) ? 1'b1 : 1'b0);

assign exitcond_fu_877_p2 = ((i3_reg_518 == KER_bound_reg_1236) ? 1'b1 : 1'b0);

assign i_fu_882_p2 = (i3_reg_518 + 32'd1);

assign indvar_flatten_next3_fu_893_p2 = (indvar_flatten3_reg_529 + 63'd1);

assign indvar_flatten_next4_fu_1053_p2 = (indvar_flatten4_reg_595 + 63'd1);

assign indvar_flatten_next7_fu_904_p2 = (indvar_flatten6_reg_540 + 32'd1);

assign indvar_flatten_next_fu_928_p2 = (ap_phi_mux_indvar_flatten_phi_fu_566_p4 + 33'd1);

assign j_2_fu_659_p2 = (j_reg_507 + 5'd1);

assign outch_2_fu_1137_p2 = (32'd1 + outch_mid2_fu_1071_p3);

assign outch_mid2_fu_1071_p3 = ((exitcond5_fu_1065_p2[0:0] === 1'b1) ? 32'd0 : outch_reg_617);

assign outpix_2_fu_1059_p2 = (31'd1 + ap_phi_mux_outpix_phi_fu_610_p4);

assign p_shl1_cast_fu_681_p1 = tmp_31_fu_673_p3;

assign p_shl2_cast_fu_1100_p3 = {{tmp_47_fu_1096_p1}, {4'd0}};

assign p_shl3_cast_fu_1112_p3 = {{tmp_48_fu_1108_p1}, {2'd0}};

assign p_shl5_cast_fu_1008_p1 = tmp_53_fu_1000_p3;

assign start_out = real_start;

assign tmp1_fu_812_p2 = ($signed(tmp_V_23_reg_1148) * $signed(tmp_V_23_reg_1148));

assign tmp2_fu_816_p2 = ($signed(tmp_V_25_reg_1154) * $signed(tmp_V_29_reg_1159));

assign tmp_17_fu_653_p2 = ((j_reg_507 == 5'd20) ? 1'b1 : 1'b0);

assign tmp_18_fu_696_p2 = ((reg_628 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_20_fu_1091_p1 = outch_mid2_fu_1071_p3;

assign tmp_22_mid2_v_fu_1079_p3 = ((exitcond5_fu_1065_p2[0:0] === 1'b1) ? outpix_2_fu_1059_p2 : ap_phi_mux_outpix_phi_fu_610_p4);

assign tmp_23_fu_948_p1 = ch_mid2_reg_1282;

assign tmp_24_fu_957_p2 = (($signed(acc_q0) > $signed(reg_628)) ? 1'b1 : 1'b0);

assign tmp_25_fu_975_p2 = ((ch2_reg_584 == 5'd20) ? 1'b1 : 1'b0);

assign tmp_27_fu_987_p1 = ch2_reg_584;

assign tmp_28_fu_1028_p2 = (($signed(buf_q0) > $signed(acc_q0)) ? 1'b1 : 1'b0);

assign tmp_29_fu_1034_p3 = ((tmp_28_fu_1028_p2[0:0] === 1'b1) ? buf_q0 : acc_q0);

assign tmp_30_fu_665_p3 = {{j_reg_507}, {4'd0}};

assign tmp_31_fu_673_p3 = {{j_reg_507}, {2'd0}};

assign tmp_32_fu_685_p2 = (tmp_30_fu_665_p3 - p_shl1_cast_fu_681_p1);

assign tmp_33_fu_702_p2 = (tmp_32_reg_1182 | 9'd1);

assign tmp_34_cast_fu_691_p1 = tmp_32_fu_685_p2;

assign tmp_34_fu_712_p2 = (tmp_32_reg_1182 | 9'd2);

assign tmp_35_cast_fu_707_p1 = tmp_33_fu_702_p2;

assign tmp_35_fu_722_p2 = (tmp_32_reg_1182 | 9'd3);

assign tmp_36_cast_fu_717_p1 = tmp_34_fu_712_p2;

assign tmp_36_fu_732_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd4));

assign tmp_37_cast_fu_727_p1 = tmp_35_fu_722_p2;

assign tmp_37_fu_742_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd5));

assign tmp_38_cast_fu_737_p1 = $signed(tmp_36_fu_732_p2);

assign tmp_38_fu_752_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd6));

assign tmp_39_cast_fu_747_p1 = $signed(tmp_37_fu_742_p2);

assign tmp_39_fu_762_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd7));

assign tmp_40_cast_fu_757_p1 = $signed(tmp_38_fu_752_p2);

assign tmp_40_fu_772_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd8));

assign tmp_41_cast_fu_767_p1 = $signed(tmp_39_fu_762_p2);

assign tmp_41_fu_782_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd9));

assign tmp_42_cast_fu_777_p1 = $signed(tmp_40_fu_772_p2);

assign tmp_42_fu_792_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd10));

assign tmp_43_cast_fu_787_p1 = $signed(tmp_41_fu_782_p2);

assign tmp_43_fu_802_p2 = ($signed(tmp_32_reg_1182) + $signed(9'd11));

assign tmp_44_cast_fu_797_p1 = $signed(tmp_42_fu_792_p2);

assign tmp_44_fu_834_p3 = {{IFMCH_curr_1_loc_reg_497}, {1'd0}};

assign tmp_45_cast_fu_807_p1 = $signed(tmp_43_fu_802_p2);

assign tmp_45_fu_842_p3 = {{tmp_9_fu_824_p4}, {1'd0}};

assign tmp_46_fu_1087_p1 = tmp_22_mid2_v_fu_1079_p3[8:0];

assign tmp_47_fu_1096_p1 = outch_mid2_fu_1071_p3[4:0];

assign tmp_48_fu_1108_p1 = outch_mid2_fu_1071_p3[6:0];

assign tmp_49_fu_1120_p2 = (p_shl2_cast_fu_1100_p3 - p_shl3_cast_fu_1112_p3);

assign tmp_50_fu_1126_p2 = (tmp_46_fu_1087_p1 + tmp_49_fu_1120_p2);

assign tmp_51_fu_972_p1 = xp_mid2_reg_1267[8:0];

assign tmp_52_cast_fu_1132_p1 = $signed(tmp_50_fu_1126_p2);

assign tmp_52_fu_992_p3 = {{ch2_reg_584}, {4'd0}};

assign tmp_53_fu_1000_p3 = {{ch2_reg_584}, {2'd0}};

assign tmp_54_fu_1012_p2 = (tmp_52_fu_992_p3 - p_shl5_cast_fu_1008_p1);

assign tmp_55_fu_1018_p2 = (tmp_54_fu_1012_p2 + tmp_51_reg_1299);

assign tmp_56_cast_fu_1023_p1 = $signed(tmp_55_fu_1018_p2);

assign tmp_9_fu_824_p4 = {{IFMDim_curr_1[31:1]}};

assign tmp_s_fu_632_p2 = ((reg_628 == 32'd1) ? 1'b1 : 1'b0);

assign xp_2_fu_1043_p2 = (xp_mid2_reg_1267 + 31'd1);

assign xp_mid2_fu_915_p3 = ((exitcond4_fu_910_p2[0:0] === 1'b1) ? 31'd0 : xp_reg_551);

always @ (posedge ap_clk) begin
    tmp_32_reg_1182[1:0] <= 2'b00;
    tmp_44_reg_1216[0] <= 1'b0;
    tmp_45_reg_1221[0] <= 1'b0;
end

endmodule //pool_2u_20u_24u_s
