// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_2u_50u_8u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 73'd1;
parameter    ap_ST_fsm_state2 = 73'd2;
parameter    ap_ST_fsm_state3 = 73'd4;
parameter    ap_ST_fsm_state4 = 73'd8;
parameter    ap_ST_fsm_state5 = 73'd16;
parameter    ap_ST_fsm_state6 = 73'd32;
parameter    ap_ST_fsm_state7 = 73'd64;
parameter    ap_ST_fsm_state8 = 73'd128;
parameter    ap_ST_fsm_state9 = 73'd256;
parameter    ap_ST_fsm_state10 = 73'd512;
parameter    ap_ST_fsm_state11 = 73'd1024;
parameter    ap_ST_fsm_state12 = 73'd2048;
parameter    ap_ST_fsm_state13 = 73'd4096;
parameter    ap_ST_fsm_state14 = 73'd8192;
parameter    ap_ST_fsm_state15 = 73'd16384;
parameter    ap_ST_fsm_state16 = 73'd32768;
parameter    ap_ST_fsm_state17 = 73'd65536;
parameter    ap_ST_fsm_state18 = 73'd131072;
parameter    ap_ST_fsm_state19 = 73'd262144;
parameter    ap_ST_fsm_state20 = 73'd524288;
parameter    ap_ST_fsm_state21 = 73'd1048576;
parameter    ap_ST_fsm_state22 = 73'd2097152;
parameter    ap_ST_fsm_state23 = 73'd4194304;
parameter    ap_ST_fsm_state24 = 73'd8388608;
parameter    ap_ST_fsm_state25 = 73'd16777216;
parameter    ap_ST_fsm_state26 = 73'd33554432;
parameter    ap_ST_fsm_state27 = 73'd67108864;
parameter    ap_ST_fsm_state28 = 73'd134217728;
parameter    ap_ST_fsm_state29 = 73'd268435456;
parameter    ap_ST_fsm_state30 = 73'd536870912;
parameter    ap_ST_fsm_state31 = 73'd1073741824;
parameter    ap_ST_fsm_state32 = 73'd2147483648;
parameter    ap_ST_fsm_state33 = 73'd4294967296;
parameter    ap_ST_fsm_state34 = 73'd8589934592;
parameter    ap_ST_fsm_state35 = 73'd17179869184;
parameter    ap_ST_fsm_state36 = 73'd34359738368;
parameter    ap_ST_fsm_state37 = 73'd68719476736;
parameter    ap_ST_fsm_state38 = 73'd137438953472;
parameter    ap_ST_fsm_state39 = 73'd274877906944;
parameter    ap_ST_fsm_state40 = 73'd549755813888;
parameter    ap_ST_fsm_state41 = 73'd1099511627776;
parameter    ap_ST_fsm_state42 = 73'd2199023255552;
parameter    ap_ST_fsm_state43 = 73'd4398046511104;
parameter    ap_ST_fsm_state44 = 73'd8796093022208;
parameter    ap_ST_fsm_state45 = 73'd17592186044416;
parameter    ap_ST_fsm_state46 = 73'd35184372088832;
parameter    ap_ST_fsm_state47 = 73'd70368744177664;
parameter    ap_ST_fsm_state48 = 73'd140737488355328;
parameter    ap_ST_fsm_state49 = 73'd281474976710656;
parameter    ap_ST_fsm_state50 = 73'd562949953421312;
parameter    ap_ST_fsm_state51 = 73'd1125899906842624;
parameter    ap_ST_fsm_state52 = 73'd2251799813685248;
parameter    ap_ST_fsm_state53 = 73'd4503599627370496;
parameter    ap_ST_fsm_state54 = 73'd9007199254740992;
parameter    ap_ST_fsm_state55 = 73'd18014398509481984;
parameter    ap_ST_fsm_state56 = 73'd36028797018963968;
parameter    ap_ST_fsm_state57 = 73'd72057594037927936;
parameter    ap_ST_fsm_state58 = 73'd144115188075855872;
parameter    ap_ST_fsm_state59 = 73'd288230376151711744;
parameter    ap_ST_fsm_state60 = 73'd576460752303423488;
parameter    ap_ST_fsm_state61 = 73'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 73'd2305843009213693952;
parameter    ap_ST_fsm_pp0_stage0 = 73'd4611686018427387904;
parameter    ap_ST_fsm_state65 = 73'd9223372036854775808;
parameter    ap_ST_fsm_state66 = 73'd18446744073709551616;
parameter    ap_ST_fsm_state67 = 73'd36893488147419103232;
parameter    ap_ST_fsm_pp1_stage0 = 73'd73786976294838206464;
parameter    ap_ST_fsm_pp1_stage1 = 73'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 73'd295147905179352825856;
parameter    ap_ST_fsm_pp2_stage0 = 73'd590295810358705651712;
parameter    ap_ST_fsm_state74 = 73'd1180591620717411303424;
parameter    ap_ST_fsm_pp3_stage0 = 73'd2361183241434822606848;
parameter    ap_ST_fsm_state77 = 73'd4722366482869645213696;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [31:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg in_V_V_read;
reg[31:0] out_V_V_din;
reg out_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [72:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] IFMCH_curr;
reg   [31:0] IFMDim_curr;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] exitcond_flatten_reg_1376;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_1344;
reg    out_V_V_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond_flatten2_reg_1433;
reg   [31:0] i3_reg_747;
reg   [32:0] indvar_flatten_reg_791;
reg   [31:0] ch_reg_802;
reg   [5:0] ch2_reg_813;
reg   [62:0] indvar_flatten2_reg_824;
reg   [30:0] outpix_reg_835;
reg   [31:0] outch_reg_846;
reg   [31:0] reg_857;
reg    ap_block_state1;
reg    ap_block_state69_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [31:0] tmp_V_2_reg_1254;
reg    ap_block_state2;
reg  signed [31:0] tmp_V_4_reg_1259;
reg    ap_block_state3;
reg  signed [31:0] tmp_V_6_reg_1265;
reg    ap_block_state4;
reg  signed [31:0] tmp_V_10_reg_1270;
reg    ap_block_state6;
reg   [31:0] tmp_V_12_reg_1277;
reg    ap_block_state7;
wire   [5:0] j_1_fu_888_p2;
reg   [5:0] j_1_reg_1288;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_2_fu_894_p3;
reg   [7:0] tmp_2_reg_1293;
wire   [0:0] tmp_1_fu_882_p2;
wire   [0:0] tmp_5_fu_907_p2;
reg   [0:0] tmp_5_reg_1300;
wire  signed [31:0] tmp1_fu_955_p2;
reg  signed [31:0] tmp1_reg_1304;
wire    ap_CS_fsm_state61;
wire  signed [31:0] tmp2_fu_959_p2;
reg  signed [31:0] tmp2_reg_1309;
wire   [30:0] tmp_3_fu_967_p4;
reg   [30:0] tmp_3_reg_1314;
wire   [32:0] tmp_22_fu_977_p3;
reg   [32:0] tmp_22_reg_1319;
wire   [31:0] tmp_23_fu_985_p3;
reg   [31:0] tmp_23_reg_1324;
wire   [62:0] bound1_fu_1001_p2;
reg   [62:0] bound1_reg_1329;
wire   [62:0] bound2_fu_1010_p2;
reg   [62:0] bound2_reg_1334;
wire   [31:0] KER_bound_fu_1016_p2;
reg   [31:0] KER_bound_reg_1339;
wire    ap_CS_fsm_state62;
wire   [0:0] exitcond_fu_1020_p2;
wire    ap_block_state63_pp0_stage0_iter0;
reg    ap_block_state64_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_1025_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [62:0] indvar_flatten_next1_fu_1036_p2;
reg   [62:0] indvar_flatten_next1_reg_1356;
wire    ap_CS_fsm_state66;
wire   [0:0] exitcond_flatten8_fu_1042_p2;
wire    ap_CS_fsm_state67;
wire   [31:0] indvar_flatten_next7_fu_1047_p2;
reg   [31:0] indvar_flatten_next7_reg_1365;
wire   [30:0] xp_mid2_fu_1058_p3;
reg   [30:0] xp_mid2_reg_1370;
wire   [0:0] exitcond_flatten_fu_1066_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state68_pp1_stage0_iter0;
wire    ap_block_state70_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [32:0] indvar_flatten_next_fu_1071_p2;
reg   [32:0] indvar_flatten_next_reg_1380;
wire   [31:0] ch_mid2_fu_1083_p3;
reg   [31:0] ch_mid2_reg_1385;
reg   [5:0] acc_addr_4_reg_1391;
wire   [31:0] ch_1_fu_1095_p2;
reg   [31:0] ch_1_reg_1397;
wire   [8:0] tmp_27_fu_1115_p1;
reg   [8:0] tmp_27_reg_1402;
wire    ap_CS_fsm_state71;
wire   [0:0] tmp_8_fu_1118_p2;
reg   [0:0] tmp_8_reg_1407;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state72_pp2_stage0_iter0;
wire    ap_block_state73_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [5:0] ch_2_fu_1124_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [7:0] buf_addr_3_reg_1416;
reg   [5:0] acc_addr_3_reg_1422;
wire   [30:0] xp_1_fu_1172_p2;
wire    ap_CS_fsm_state74;
wire   [0:0] exitcond_flatten2_fu_1177_p2;
wire    ap_block_state75_pp3_stage0_iter0;
reg    ap_block_state76_pp3_stage0_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [62:0] indvar_flatten_next2_fu_1182_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [30:0] tmp_4_mid2_v_fu_1208_p3;
reg   [30:0] tmp_4_mid2_v_reg_1442;
reg   [7:0] buf_addr_2_reg_1447;
wire   [31:0] outch_1_fu_1248_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state63;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state68;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage1_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state72;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state75;
reg   [7:0] buf_address0;
reg    buf_ce0;
wire   [31:0] buf_q0;
reg   [7:0] buf_address1;
reg    buf_ce1;
reg    buf_we1;
reg   [31:0] buf_d1;
reg   [5:0] acc_address0;
reg    acc_ce0;
wire   [31:0] acc_q0;
reg   [5:0] acc_address1;
reg    acc_ce1;
reg    acc_we1;
reg   [31:0] acc_d1;
reg   [31:0] IFMCH_curr_loc_reg_726;
reg    ap_block_state8;
wire   [0:0] tmp_s_fu_861_p2;
reg   [5:0] j_reg_736;
wire    ap_CS_fsm_state12;
reg   [62:0] indvar_flatten1_reg_758;
wire    ap_CS_fsm_state77;
reg   [31:0] indvar_flatten6_reg_769;
wire   [0:0] exitcond_flatten1_fu_1031_p2;
reg   [30:0] xp_reg_780;
reg   [32:0] ap_phi_mux_indvar_flatten_phi_fu_795_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] ap_phi_mux_ch_phi_fu_806_p4;
reg   [30:0] ap_phi_mux_outpix_phi_fu_839_p4;
wire   [63:0] tmp_4_fu_902_p1;
wire   [63:0] tmp_17_fu_918_p3;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_19_fu_932_p3;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_21_fu_946_p3;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire   [63:0] tmp_15_fu_1091_p1;
wire   [63:0] tmp_31_cast_fu_1152_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] tmp_11_fu_1130_p1;
wire   [63:0] tmp_28_cast_fu_1243_p1;
wire   [63:0] tmp_6_fu_1220_p1;
reg    ap_block_state5;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp3_stage0_01001;
wire   [31:0] tmp_13_fu_1163_p3;
wire   [31:0] acc_load_1_valIn_V_fu_1106_p3;
wire   [7:0] tmp_7_fu_913_p2;
wire   [7:0] tmp_18_fu_927_p2;
wire   [7:0] tmp_20_fu_941_p2;
wire   [30:0] bound1_fu_1001_p0;
wire   [62:0] cast9_fu_993_p1;
wire   [31:0] bound1_fu_1001_p1;
wire   [31:0] bound2_fu_1010_p0;
wire   [30:0] bound2_fu_1010_p1;
wire   [0:0] exitcond1_fu_1053_p2;
wire   [0:0] exitcond3_fu_1077_p2;
wire   [0:0] tmp_16_fu_1100_p2;
wire   [7:0] tmp_28_fu_1135_p3;
wire   [8:0] tmp_30_cast_fu_1143_p1;
wire   [8:0] tmp_29_fu_1147_p2;
wire   [0:0] tmp_12_fu_1157_p2;
wire   [0:0] exitcond2_fu_1194_p2;
wire   [30:0] outpix_1_fu_1188_p2;
wire   [31:0] outch_mid2_fu_1200_p3;
wire   [6:0] tmp_25_fu_1225_p1;
wire   [8:0] tmp_27_cast_fu_1229_p3;
wire   [8:0] tmp_24_fu_1216_p1;
wire   [8:0] tmp_26_fu_1237_p2;
wire    ap_CS_fsm_state65;
reg   [72:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [62:0] bound1_fu_1001_p10;
wire   [62:0] bound2_fu_1010_p00;
reg    ap_condition_514;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 73'd1;
#0 IFMCH_curr = 32'd0;
#0 IFMDim_curr = 32'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

pool_2u_50u_8u_s_bVr #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .q0(buf_q0),
    .address1(buf_address1),
    .ce1(buf_ce1),
    .we1(buf_we1),
    .d1(buf_d1)
);

pool_2u_50u_8u_s_bWr #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
acc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_address0),
    .ce0(acc_ce0),
    .q0(acc_q0),
    .address1(acc_address1),
    .ce1(acc_ce1),
    .we1(acc_we1),
    .d1(acc_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state65)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state63) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state63))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state63);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state62)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state68) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state67) & (exitcond_flatten8_fu_1042_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state67) & (exitcond_flatten8_fu_1042_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state72) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state72))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state72);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state75) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((exitcond_flatten8_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state75))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state75);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((exitcond_flatten8_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_514)) begin
        if ((tmp_s_fu_861_p2 == 1'd0)) begin
            IFMCH_curr_loc_reg_726 <= IFMCH_curr;
        end else if ((tmp_s_fu_861_p2 == 1'd1)) begin
            IFMCH_curr_loc_reg_726 <= tmp_V_10_reg_1270;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        ch2_reg_813 <= 6'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_8_fu_1118_p2 == 1'd0))) begin
        ch2_reg_813 <= ch_2_fu_1124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1376 == 1'd0))) begin
        ch_reg_802 <= ch_1_reg_1397;
    end else if (((1'b1 == ap_CS_fsm_state67) & (exitcond_flatten8_fu_1042_p2 == 1'd0))) begin
        ch_reg_802 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_1020_p2 == 1'd0))) begin
        i3_reg_747 <= i_fu_1025_p2;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        i3_reg_747 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        indvar_flatten1_reg_758 <= indvar_flatten_next1_reg_1356;
    end else if (((tmp_5_reg_1300 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
        indvar_flatten1_reg_758 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        indvar_flatten2_reg_824 <= 63'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_fu_1177_p2 == 1'd0))) begin
        indvar_flatten2_reg_824 <= indvar_flatten_next2_fu_1182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (exitcond_flatten1_fu_1031_p2 == 1'd0))) begin
        indvar_flatten6_reg_769 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        indvar_flatten6_reg_769 <= indvar_flatten_next7_reg_1365;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1376 == 1'd0))) begin
        indvar_flatten_reg_791 <= indvar_flatten_next_reg_1380;
    end else if (((1'b1 == ap_CS_fsm_state67) & (exitcond_flatten8_fu_1042_p2 == 1'd0))) begin
        indvar_flatten_reg_791 <= 33'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_736 <= j_1_reg_1288;
    end else if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        j_reg_736 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        outch_reg_846 <= 32'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_fu_1177_p2 == 1'd0))) begin
        outch_reg_846 <= outch_1_fu_1248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten8_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
        outpix_reg_835 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_reg_1433 == 1'd0))) begin
        outpix_reg_835 <= tmp_4_mid2_v_reg_1442;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (exitcond_flatten1_fu_1031_p2 == 1'd0))) begin
        xp_reg_780 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        xp_reg_780 <= xp_1_fu_1172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (tmp_s_fu_861_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        IFMCH_curr <= tmp_V_10_reg_1270;
        IFMDim_curr <= tmp_V_12_reg_1277;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        KER_bound_reg_1339 <= KER_bound_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_8_fu_1118_p2 == 1'd0))) begin
        acc_addr_3_reg_1422 <= tmp_11_fu_1130_p1;
        buf_addr_3_reg_1416 <= tmp_31_cast_fu_1152_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1376 == 1'd0))) begin
        acc_addr_4_reg_1391 <= tmp_15_fu_1091_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_reg_1300 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
        bound1_reg_1329 <= bound1_fu_1001_p2;
        bound2_reg_1334 <= bound2_fu_1010_p2;
        tmp_22_reg_1319[32 : 1] <= tmp_22_fu_977_p3[32 : 1];
        tmp_23_reg_1324[31 : 1] <= tmp_23_fu_985_p3[31 : 1];
        tmp_3_reg_1314 <= {{IFMDim_curr[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_fu_1177_p2 == 1'd0))) begin
        buf_addr_2_reg_1447 <= tmp_28_cast_fu_1243_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1376 == 1'd0))) begin
        ch_1_reg_1397 <= ch_1_fu_1095_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_1066_p2 == 1'd0))) begin
        ch_mid2_reg_1385 <= ch_mid2_fu_1083_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        exitcond_flatten2_reg_1433 <= exitcond_flatten2_fu_1177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_1376 <= exitcond_flatten_fu_1066_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_1344 <= exitcond_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        indvar_flatten_next1_reg_1356 <= indvar_flatten_next1_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        indvar_flatten_next7_reg_1365 <= indvar_flatten_next7_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_1380 <= indvar_flatten_next_fu_1071_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_reg_1288 <= j_1_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1376 == 1'd0)))) begin
        reg_857 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (tmp_5_reg_1300 == 1'd0))) begin
        tmp1_reg_1304 <= tmp1_fu_955_p2;
        tmp2_reg_1309 <= tmp2_fu_959_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp_27_reg_1402 <= tmp_27_fu_1115_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_1_fu_882_p2 == 1'd0))) begin
        tmp_2_reg_1293[7 : 2] <= tmp_2_fu_894_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_fu_1177_p2 == 1'd0))) begin
        tmp_4_mid2_v_reg_1442 <= tmp_4_mid2_v_fu_1208_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_882_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_5_reg_1300 <= tmp_5_fu_907_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_8_reg_1407 <= tmp_8_fu_1118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_10_reg_1270 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_12_reg_1277 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_2_reg_1254 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_4_reg_1259 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_6_reg_1265 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (exitcond_flatten8_fu_1042_p2 == 1'd0))) begin
        xp_mid2_reg_1370 <= xp_mid2_fu_1058_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address0 = tmp_11_fu_1130_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        acc_address0 = tmp_15_fu_1091_p1;
    end else begin
        acc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        acc_address1 = tmp_6_fu_1220_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        acc_address1 = acc_addr_3_reg_1422;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_address1 = acc_addr_4_reg_1391;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        acc_address1 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        acc_address1 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        acc_address1 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        acc_address1 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        acc_address1 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        acc_address1 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        acc_address1 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        acc_address1 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        acc_address1 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        acc_address1 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        acc_address1 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        acc_address1 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        acc_address1 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        acc_address1 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        acc_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        acc_address1 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        acc_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        acc_address1 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        acc_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        acc_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        acc_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        acc_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        acc_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        acc_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        acc_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        acc_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        acc_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        acc_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        acc_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        acc_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        acc_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        acc_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        acc_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        acc_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        acc_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        acc_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        acc_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        acc_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        acc_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        acc_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        acc_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        acc_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        acc_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        acc_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        acc_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        acc_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        acc_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        acc_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_address1 = 64'd0;
    end else begin
        acc_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        acc_ce0 = 1'b1;
    end else begin
        acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        acc_ce1 = 1'b1;
    end else begin
        acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_d1 = acc_load_1_valIn_V_fu_1106_p3;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        acc_d1 = 32'd4293967297;
    end else begin
        acc_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state61) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_8_reg_1407 == 1'd0)) | ((tmp_1_fu_882_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_fu_1177_p2 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1376 == 1'd0)))) begin
        acc_we1 = 1'b1;
    end else begin
        acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_1020_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state63 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state63 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_1066_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state68 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state68 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_8_fu_1118_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state72 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state72 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten2_fu_1177_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state75 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state75 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1376 == 1'd0))) begin
        ap_phi_mux_ch_phi_fu_806_p4 = ch_1_reg_1397;
    end else begin
        ap_phi_mux_ch_phi_fu_806_p4 = ch_reg_802;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1376 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_795_p4 = indvar_flatten_next_reg_1380;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_795_p4 = indvar_flatten_reg_791;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_reg_1433 == 1'd0))) begin
        ap_phi_mux_outpix_phi_fu_839_p4 = tmp_4_mid2_v_reg_1442;
    end else begin
        ap_phi_mux_outpix_phi_fu_839_p4 = outpix_reg_835;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        buf_address0 = tmp_28_cast_fu_1243_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address0 = tmp_31_cast_fu_1152_p1;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        buf_address1 = buf_addr_2_reg_1447;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_address1 = buf_addr_3_reg_1416;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_address1 = tmp_21_fu_946_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_address1 = tmp_19_fu_932_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_address1 = tmp_17_fu_918_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_address1 = tmp_4_fu_902_p1;
    end else begin
        buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        buf_ce0 = 1'b1;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        buf_ce1 = 1'b1;
    end else begin
        buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        buf_d1 = tmp_13_fu_1163_p3;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        buf_d1 = 32'd4293967297;
    end else begin
        buf_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_8_reg_1407 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_1_fu_882_p2 == 1'd0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_reg_1433 == 1'd0)))) begin
        buf_we1 = 1'b1;
    end else begin
        buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_reg_1344 == 1'd0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1376 == 1'd0) & (1'b0 == ap_block_pp1_stage1)))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_1344 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_flatten_reg_1376 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_reg_1433 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_reg_1344 == 1'd0)))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_reg_1433 == 1'd0))) begin
        out_V_V_din = buf_q0;
    end else if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_1344 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_din = in_V_V_dout;
    end else begin
        out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten2_reg_1433 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_1344 == 1'd0)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_1_fu_882_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((tmp_5_reg_1300 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_1020_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_1020_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state66 : begin
            if (((exitcond_flatten1_fu_1031_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((exitcond_flatten8_fu_1042_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_1066_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_1066_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_8_fu_1118_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (tmp_8_fu_1118_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten2_fu_1177_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (exitcond_flatten2_fu_1177_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KER_bound_fu_1016_p2 = ($signed(tmp2_reg_1309) * $signed(tmp1_reg_1304));

assign acc_load_1_valIn_V_fu_1106_p3 = ((tmp_16_fu_1100_p2[0:0] === 1'b1) ? acc_q0 : reg_857);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_1344 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1344 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_1344 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1344 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((out_V_V_full_n == 1'b0) & (exitcond_reg_1344 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1344 == 1'd0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_reg_1376 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_reg_1376 == 1'd0));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten2_reg_1433 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten2_reg_1433 == 1'd0));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (exitcond_flatten2_reg_1433 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

assign ap_block_state63_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state64_pp0_stage0_iter1 = (((out_V_V_full_n == 1'b0) & (exitcond_reg_1344 == 1'd0)) | ((in_V_V_empty_n == 1'b0) & (exitcond_reg_1344 == 1'd0)));
end

assign ap_block_state68_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state69_pp1_stage1_iter0 = ((in_V_V_empty_n == 1'b0) & (exitcond_flatten_reg_1376 == 1'd0));
end

always @ (*) begin
    ap_block_state7 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

assign ap_block_state70_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state76_pp3_stage0_iter1 = ((out_V_V_full_n == 1'b0) & (exitcond_flatten2_reg_1433 == 1'd0));
end

always @ (*) begin
    ap_block_state8 = ((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_514 = (~((out_V_V_full_n == 1'b0) | (in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound1_fu_1001_p0 = cast9_fu_993_p1;

assign bound1_fu_1001_p1 = bound1_fu_1001_p10;

assign bound1_fu_1001_p10 = IFMCH_curr_loc_reg_726;

assign bound1_fu_1001_p2 = (bound1_fu_1001_p0 * bound1_fu_1001_p1);

assign bound2_fu_1010_p0 = bound2_fu_1010_p00;

assign bound2_fu_1010_p00 = tmp_V_2_reg_1254;

assign bound2_fu_1010_p1 = cast9_fu_993_p1;

assign bound2_fu_1010_p2 = (bound2_fu_1010_p0 * bound2_fu_1010_p1);

assign cast9_fu_993_p1 = tmp_3_fu_967_p4;

assign ch_1_fu_1095_p2 = (ch_mid2_reg_1385 + 32'd1);

assign ch_2_fu_1124_p2 = (ch2_reg_813 + 6'd1);

assign ch_mid2_fu_1083_p3 = ((exitcond3_fu_1077_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_ch_phi_fu_806_p4);

assign exitcond1_fu_1053_p2 = ((xp_reg_780 == tmp_3_reg_1314) ? 1'b1 : 1'b0);

assign exitcond2_fu_1194_p2 = ((outch_reg_846 == IFMCH_curr_loc_reg_726) ? 1'b1 : 1'b0);

assign exitcond3_fu_1077_p2 = ((ap_phi_mux_ch_phi_fu_806_p4 == IFMCH_curr_loc_reg_726) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_1031_p2 = ((indvar_flatten1_reg_758 == bound2_reg_1334) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_1177_p2 = ((indvar_flatten2_reg_824 == bound1_reg_1329) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_1042_p2 = ((indvar_flatten6_reg_769 == tmp_23_reg_1324) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1066_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_795_p4 == tmp_22_reg_1319) ? 1'b1 : 1'b0);

assign exitcond_fu_1020_p2 = ((i3_reg_747 == KER_bound_reg_1339) ? 1'b1 : 1'b0);

assign i_fu_1025_p2 = (i3_reg_747 + 32'd1);

assign indvar_flatten_next1_fu_1036_p2 = (indvar_flatten1_reg_758 + 63'd1);

assign indvar_flatten_next2_fu_1182_p2 = (indvar_flatten2_reg_824 + 63'd1);

assign indvar_flatten_next7_fu_1047_p2 = (indvar_flatten6_reg_769 + 32'd1);

assign indvar_flatten_next_fu_1071_p2 = (ap_phi_mux_indvar_flatten_phi_fu_795_p4 + 33'd1);

assign j_1_fu_888_p2 = (j_reg_736 + 6'd1);

assign outch_1_fu_1248_p2 = (32'd1 + outch_mid2_fu_1200_p3);

assign outch_mid2_fu_1200_p3 = ((exitcond2_fu_1194_p2[0:0] === 1'b1) ? 32'd0 : outch_reg_846);

assign outpix_1_fu_1188_p2 = (31'd1 + ap_phi_mux_outpix_phi_fu_839_p4);

assign start_out = real_start;

assign tmp1_fu_955_p2 = ($signed(tmp_V_4_reg_1259) * $signed(tmp_V_4_reg_1259));

assign tmp2_fu_959_p2 = ($signed(tmp_V_6_reg_1265) * $signed(tmp_V_10_reg_1270));

assign tmp_11_fu_1130_p1 = ch2_reg_813;

assign tmp_12_fu_1157_p2 = (($signed(buf_q0) > $signed(acc_q0)) ? 1'b1 : 1'b0);

assign tmp_13_fu_1163_p3 = ((tmp_12_fu_1157_p2[0:0] === 1'b1) ? buf_q0 : acc_q0);

assign tmp_15_fu_1091_p1 = ch_mid2_reg_1385;

assign tmp_16_fu_1100_p2 = (($signed(acc_q0) > $signed(reg_857)) ? 1'b1 : 1'b0);

assign tmp_17_fu_918_p3 = {{56'd0}, {tmp_7_fu_913_p2}};

assign tmp_18_fu_927_p2 = (tmp_2_reg_1293 | 8'd2);

assign tmp_19_fu_932_p3 = {{56'd0}, {tmp_18_fu_927_p2}};

assign tmp_1_fu_882_p2 = ((j_reg_736 == 6'd50) ? 1'b1 : 1'b0);

assign tmp_20_fu_941_p2 = (tmp_2_reg_1293 | 8'd3);

assign tmp_21_fu_946_p3 = {{56'd0}, {tmp_20_fu_941_p2}};

assign tmp_22_fu_977_p3 = {{IFMCH_curr_loc_reg_726}, {1'd0}};

assign tmp_23_fu_985_p3 = {{tmp_3_fu_967_p4}, {1'd0}};

assign tmp_24_fu_1216_p1 = tmp_4_mid2_v_fu_1208_p3[8:0];

assign tmp_25_fu_1225_p1 = outch_mid2_fu_1200_p3[6:0];

assign tmp_26_fu_1237_p2 = (tmp_27_cast_fu_1229_p3 + tmp_24_fu_1216_p1);

assign tmp_27_cast_fu_1229_p3 = {{tmp_25_fu_1225_p1}, {2'd0}};

assign tmp_27_fu_1115_p1 = xp_mid2_reg_1370[8:0];

assign tmp_28_cast_fu_1243_p1 = tmp_26_fu_1237_p2;

assign tmp_28_fu_1135_p3 = {{ch2_reg_813}, {2'd0}};

assign tmp_29_fu_1147_p2 = (tmp_27_reg_1402 + tmp_30_cast_fu_1143_p1);

assign tmp_2_fu_894_p3 = {{j_reg_736}, {2'd0}};

assign tmp_30_cast_fu_1143_p1 = tmp_28_fu_1135_p3;

assign tmp_31_cast_fu_1152_p1 = tmp_29_fu_1147_p2;

assign tmp_3_fu_967_p4 = {{IFMDim_curr[31:1]}};

assign tmp_4_fu_902_p1 = tmp_2_fu_894_p3;

assign tmp_4_mid2_v_fu_1208_p3 = ((exitcond2_fu_1194_p2[0:0] === 1'b1) ? outpix_1_fu_1188_p2 : ap_phi_mux_outpix_phi_fu_839_p4);

assign tmp_5_fu_907_p2 = ((reg_857 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_1220_p1 = outch_mid2_fu_1200_p3;

assign tmp_7_fu_913_p2 = (tmp_2_reg_1293 | 8'd1);

assign tmp_8_fu_1118_p2 = ((ch2_reg_813 == 6'd50) ? 1'b1 : 1'b0);

assign tmp_s_fu_861_p2 = ((reg_857 == 32'd2) ? 1'b1 : 1'b0);

assign xp_1_fu_1172_p2 = (xp_mid2_reg_1370 + 31'd1);

assign xp_mid2_fu_1058_p3 = ((exitcond1_fu_1053_p2[0:0] === 1'b1) ? 31'd0 : xp_reg_780);

always @ (posedge ap_clk) begin
    tmp_2_reg_1293[1:0] <= 2'b00;
    tmp_22_reg_1319[0] <= 1'b0;
    tmp_23_reg_1324[0] <= 1'b0;
end

endmodule //pool_2u_50u_8u_s
