-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool_2u_20u_24u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of pool_2u_20u_24u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv32_FFF0BDC1 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111100001011110111000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal IFMCH_curr_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IFMDim_curr_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal exitcond_flatten_reg_1273 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond_flatten4_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_1330_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_562 : STD_LOGIC_VECTOR (32 downto 0);
    signal ch_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch2_reg_584 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten4_reg_595 : STD_LOGIC_VECTOR (62 downto 0);
    signal outpix_reg_606 : STD_LOGIC_VECTOR (30 downto 0);
    signal outch_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state47_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_V_21_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_23_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_V_25_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal tmp_V_29_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal tmp_V_31_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal j_2_fu_659_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_1177 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_32_fu_685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_reg_1182 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1197 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp2_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_824_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_reg_1211 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_44_fu_834_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_44_reg_1216 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_45_fu_842_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound3_fu_858_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound3_reg_1226 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound5_fu_867_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound5_reg_1231 : STD_LOGIC_VECTOR (62 downto 0);
    signal KER_bound_fu_873_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal KER_bound_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal exitcond_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state41_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal indvar_flatten_next3_fu_893_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal indvar_flatten_next3_reg_1253 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal exitcond_flatten8_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal indvar_flatten_next7_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_next7_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal xp_mid2_fu_915_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal xp_mid2_reg_1267 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state46_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_928_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal indvar_flatten_next_reg_1277 : STD_LOGIC_VECTOR (32 downto 0);
    signal ch_mid2_fu_940_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_mid2_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_addr_8_reg_1288 : STD_LOGIC_VECTOR (4 downto 0);
    signal ch_3_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_3_reg_1294 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_972_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_reg_1299 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_25_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state50_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state51_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ch_4_fu_981_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal buf_addr_6_reg_1313 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_addr_7_reg_1319 : STD_LOGIC_VECTOR (4 downto 0);
    signal xp_2_fu_1043_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal exitcond_flatten4_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state53_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state54_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state55_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next4_fu_1053_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_22_mid2_v_fu_1079_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_22_mid2_v_reg_1339 : STD_LOGIC_VECTOR (30 downto 0);
    signal buf_addr_5_reg_1344 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_addr_5_reg_1344_pp3_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal outch_2_fu_1137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state41 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state46 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state50 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state53 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal buf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_ce1 : STD_LOGIC;
    signal buf_we1 : STD_LOGIC;
    signal buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_ce0 : STD_LOGIC;
    signal acc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_ce1 : STD_LOGIC;
    signal acc_we1 : STD_LOGIC;
    signal acc_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal IFMCH_curr_1_loc_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal tmp_s_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal indvar_flatten3_reg_529 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal indvar_flatten6_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten3_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xp_reg_551 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_566_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_ch_phi_fu_577_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_outpix_phi_fu_610_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_34_cast_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_36_cast_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_37_cast_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_38_cast_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_39_cast_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_40_cast_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_41_cast_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_42_cast_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_43_cast_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_44_cast_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_45_cast_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_23_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_27_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_1132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1091_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal tmp_29_fu_1034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_load_2_valIn_V_fu_963_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_673_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_fu_665_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_33_fu_702_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_34_fu_712_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_35_fu_722_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_fu_732_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_742_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_752_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_762_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_772_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_782_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_fu_792_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_fu_802_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound3_fu_858_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal cast9_fu_850_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound3_fu_858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound5_fu_867_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound5_fu_867_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond4_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_1000_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_992_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_1008_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_54_fu_1012_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_1018_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outpix_2_fu_1059_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal outch_mid2_fu_1071_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_1096_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_fu_1108_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_1100_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_1112_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_46_fu_1087_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_49_fu_1120_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_50_fu_1126_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal bound3_fu_858_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound5_fu_867_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_condition_497 : BOOLEAN;

    component pool_2u_20u_24u_s0iy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pool_2u_20u_24u_s1iI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buf_U : component pool_2u_20u_24u_s0iy
    generic map (
        DataWidth => 32,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_address0,
        ce0 => buf_ce0,
        q0 => buf_q0,
        address1 => buf_address1,
        ce1 => buf_ce1,
        we1 => buf_we1,
        d1 => buf_d1);

    acc_U : component pool_2u_20u_24u_s1iI
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_address0,
        ce0 => acc_ce0,
        q0 => acc_q0,
        address1 => acc_address1,
        ce1 => acc_ce1,
        we1 => acc_we1,
        d1 => acc_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state41) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state41))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state41);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state46) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_flatten8_fu_899_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_flatten8_fu_899_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state50) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state50))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state50);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state53) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((exitcond_flatten8_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state53)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state53);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((exitcond_flatten8_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    IFMCH_curr_1_loc_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_497)) then
                if ((tmp_s_fu_632_p2 = ap_const_lv1_0)) then 
                    IFMCH_curr_1_loc_reg_497 <= IFMCH_curr_1;
                elsif ((tmp_s_fu_632_p2 = ap_const_lv1_1)) then 
                    IFMCH_curr_1_loc_reg_497 <= tmp_V_29_reg_1159;
                end if;
            end if; 
        end if;
    end process;

    ch2_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                ch2_reg_584 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_25_fu_975_p2 = ap_const_lv1_0))) then 
                ch2_reg_584 <= ch_4_fu_981_p2;
            end if; 
        end if;
    end process;

    ch_reg_573_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_1273 = ap_const_lv1_0))) then 
                ch_reg_573 <= ch_3_reg_1294;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_flatten8_fu_899_p2 = ap_const_lv1_0))) then 
                ch_reg_573 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i3_reg_518_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_fu_877_p2 = ap_const_lv1_0))) then 
                i3_reg_518 <= i_fu_882_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i3_reg_518 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                indvar_flatten3_reg_529 <= indvar_flatten_next3_reg_1253;
            elsif (((tmp_18_reg_1197 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                indvar_flatten3_reg_529 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                indvar_flatten4_reg_595 <= ap_const_lv63_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten4_fu_1048_p2 = ap_const_lv1_0))) then 
                indvar_flatten4_reg_595 <= indvar_flatten_next4_fu_1053_p2;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond_flatten3_fu_888_p2 = ap_const_lv1_0))) then 
                indvar_flatten6_reg_540 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                indvar_flatten6_reg_540 <= indvar_flatten_next7_reg_1262;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_562_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_1273 = ap_const_lv1_0))) then 
                indvar_flatten_reg_562 <= indvar_flatten_next_reg_1277;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_flatten8_fu_899_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_562 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    j_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_reg_507 <= j_2_reg_1177;
            elsif ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_reg_507 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    outch_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                outch_reg_617 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten4_fu_1048_p2 = ap_const_lv1_0))) then 
                outch_reg_617 <= outch_2_fu_1137_p2;
            end if; 
        end if;
    end process;

    outpix_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                outpix_reg_606 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten4_reg_1330 = ap_const_lv1_0))) then 
                outpix_reg_606 <= tmp_22_mid2_v_reg_1339;
            end if; 
        end if;
    end process;

    xp_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond_flatten3_fu_888_p2 = ap_const_lv1_0))) then 
                xp_reg_551 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                xp_reg_551 <= xp_2_fu_1043_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (tmp_s_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                IFMCH_curr_1 <= tmp_V_29_reg_1159;
                IFMDim_curr_1 <= tmp_V_31_reg_1166;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                KER_bound_reg_1236 <= KER_bound_fu_873_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_25_fu_975_p2 = ap_const_lv1_0))) then
                acc_addr_7_reg_1319 <= tmp_27_fu_987_p1(5 - 1 downto 0);
                buf_addr_6_reg_1313 <= tmp_56_cast_fu_1023_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_flatten_reg_1273 = ap_const_lv1_0))) then
                acc_addr_8_reg_1288 <= tmp_23_fu_948_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_18_reg_1197 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                bound3_reg_1226 <= bound3_fu_858_p2;
                bound5_reg_1231 <= bound5_fu_867_p2;
                    tmp_44_reg_1216(32 downto 1) <= tmp_44_fu_834_p3(32 downto 1);
                    tmp_45_reg_1221(31 downto 1) <= tmp_45_fu_842_p3(31 downto 1);
                tmp_9_reg_1211 <= IFMDim_curr_1(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten4_fu_1048_p2 = ap_const_lv1_0))) then
                buf_addr_5_reg_1344 <= tmp_52_cast_fu_1132_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                buf_addr_5_reg_1344_pp3_iter1_reg <= buf_addr_5_reg_1344;
                exitcond_flatten4_reg_1330 <= exitcond_flatten4_fu_1048_p2;
                exitcond_flatten4_reg_1330_pp3_iter1_reg <= exitcond_flatten4_reg_1330;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_flatten_reg_1273 = ap_const_lv1_0))) then
                ch_3_reg_1294 <= ch_3_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_923_p2 = ap_const_lv1_0))) then
                ch_mid2_reg_1282 <= ch_mid2_fu_940_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_1273 <= exitcond_flatten_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_1241 <= exitcond_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                indvar_flatten_next3_reg_1253 <= indvar_flatten_next3_fu_893_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                indvar_flatten_next7_reg_1262 <= indvar_flatten_next7_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                indvar_flatten_next_reg_1277 <= indvar_flatten_next_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_2_reg_1177 <= j_2_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_done_reg = ap_const_logic_1) or (out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_flatten_reg_1273 = ap_const_lv1_0)))) then
                reg_628 <= in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (tmp_18_reg_1197 = ap_const_lv1_0))) then
                tmp1_reg_1201 <= tmp1_fu_812_p2;
                tmp2_reg_1206 <= tmp2_fu_816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_18_reg_1197 <= tmp_18_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten4_fu_1048_p2 = ap_const_lv1_0))) then
                tmp_22_mid2_v_reg_1339 <= tmp_22_mid2_v_fu_1079_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_25_reg_1304 <= tmp_25_fu_975_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_17_fu_653_p2 = ap_const_lv1_0))) then
                    tmp_32_reg_1182(8 downto 2) <= tmp_32_fu_685_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                tmp_51_reg_1299 <= tmp_51_fu_972_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_21_reg_1143 <= in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_23_reg_1148 <= in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_V_25_reg_1154 <= in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_V_29_reg_1159 <= in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_V_31_reg_1166 <= in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_flatten8_fu_899_p2 = ap_const_lv1_0))) then
                xp_mid2_reg_1267 <= xp_mid2_fu_915_p3;
            end if;
        end if;
    end process;
    tmp_32_reg_1182(1 downto 0) <= "00";
    tmp_44_reg_1216(0) <= '0';
    tmp_45_reg_1221(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_V_V_empty_n, out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_enable_reg_pp1_iter0, ap_enable_reg_pp3_iter2, ap_CS_fsm_state9, tmp_17_fu_653_p2, tmp_18_reg_1197, ap_CS_fsm_state39, exitcond_fu_877_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state44, exitcond_flatten8_fu_899_p2, ap_CS_fsm_state45, exitcond_flatten_fu_923_p2, tmp_25_fu_975_p2, ap_enable_reg_pp2_iter0, exitcond_flatten4_fu_1048_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, exitcond_flatten3_fu_888_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((tmp_17_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((tmp_18_reg_1197 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_877_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_877_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state44 => 
                if (((exitcond_flatten3_fu_888_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                if (((exitcond_flatten8_fu_899_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_flatten_fu_923_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_flatten_fu_923_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (tmp_25_fu_975_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (tmp_25_fu_975_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond_flatten4_fu_1048_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond_flatten4_fu_1048_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    KER_bound_fu_873_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp2_reg_1206) * signed(tmp1_reg_1201))), 32));

    acc_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, tmp_23_fu_948_p1, ap_block_pp2_stage0, tmp_27_fu_987_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            acc_address0 <= tmp_27_fu_987_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            acc_address0 <= tmp_23_fu_948_p1(5 - 1 downto 0);
        else 
            acc_address0 <= "XXXXX";
        end if; 
    end process;


    acc_address1_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_state9, ap_CS_fsm_state39, ap_CS_fsm_pp1_stage0, acc_addr_8_reg_1288, ap_CS_fsm_pp2_stage0, acc_addr_7_reg_1319, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_block_pp2_stage0, tmp_20_fu_1091_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            acc_address1 <= tmp_20_fu_1091_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            acc_address1 <= acc_addr_7_reg_1319;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            acc_address1 <= acc_addr_8_reg_1288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            acc_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            acc_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            acc_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            acc_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            acc_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            acc_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            acc_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            acc_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            acc_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            acc_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            acc_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            acc_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            acc_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            acc_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            acc_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            acc_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            acc_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            acc_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            acc_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            acc_address1 <= "XXXXX";
        end if; 
    end process;


    acc_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            acc_ce0 <= ap_const_logic_1;
        else 
            acc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state39, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            acc_ce1 <= ap_const_logic_1;
        else 
            acc_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    acc_d1_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_state9, ap_CS_fsm_state39, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_block_pp2_stage0, acc_load_2_valIn_V_fu_963_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            acc_d1 <= acc_load_2_valIn_V_fu_963_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            acc_d1 <= ap_const_lv32_FFF0BDC1;
        else 
            acc_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    acc_load_2_valIn_V_fu_963_p3 <= 
        acc_q0 when (tmp_24_fu_957_p2(0) = '1') else 
        reg_628;

    acc_we1_assign_proc : process(exitcond_flatten_reg_1273, ap_CS_fsm_state9, tmp_17_fu_653_p2, ap_CS_fsm_state39, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_25_reg_1304, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, exitcond_flatten4_fu_1048_p2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten4_fu_1048_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_25_reg_1304 = ap_const_lv1_0)) or ((tmp_17_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_1273 = ap_const_lv1_0)))) then 
            acc_we1 <= ap_const_logic_1;
        else 
            acc_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(44);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(45);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(49);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state43 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(43);
    ap_CS_fsm_state49 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(48);
    ap_CS_fsm_state56 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_1241)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((out_V_V_full_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0)) or ((in_V_V_empty_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_1241)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((out_V_V_full_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0)) or ((in_V_V_empty_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter1, exitcond_reg_1241)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((out_V_V_full_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0)) or ((in_V_V_empty_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_11001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp1_iter0, exitcond_flatten_reg_1273)
    begin
                ap_block_pp1_stage1_11001 <= ((in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_1273 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp1_iter0, exitcond_flatten_reg_1273)
    begin
                ap_block_pp1_stage1_subdone <= ((in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_1273 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_01001_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp3_iter2, exitcond_flatten4_reg_1330_pp3_iter1_reg)
    begin
                ap_block_pp3_stage0_01001 <= ((out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage0_11001_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp3_iter2, exitcond_flatten4_reg_1330_pp3_iter1_reg)
    begin
                ap_block_pp3_stage0_11001 <= ((out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp3_iter2, exitcond_flatten4_reg_1330_pp3_iter1_reg)
    begin
                ap_block_pp3_stage0_subdone <= ((out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state2 <= ((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state3 <= ((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state4 <= ((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state41_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state42_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, exitcond_reg_1241)
    begin
                ap_block_state42_pp0_stage0_iter1 <= (((out_V_V_full_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0)) or ((in_V_V_empty_n = ap_const_logic_0) and (exitcond_reg_1241 = ap_const_lv1_0)));
    end process;

        ap_block_state46_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state47_pp1_stage1_iter0_assign_proc : process(in_V_V_empty_n, exitcond_flatten_reg_1273)
    begin
                ap_block_state47_pp1_stage1_iter0 <= ((in_V_V_empty_n = ap_const_logic_0) and (exitcond_flatten_reg_1273 = ap_const_lv1_0));
    end process;

        ap_block_state48_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state5 <= ((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state50_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state55_pp3_stage0_iter2_assign_proc : process(out_V_V_full_n, exitcond_flatten4_reg_1330_pp3_iter1_reg)
    begin
                ap_block_state55_pp3_stage0_iter2 <= ((out_V_V_full_n = ap_const_logic_0) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state6_assign_proc : process(in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state6 <= ((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state7 <= ((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(in_V_V_empty_n, out_V_V_full_n)
    begin
                ap_block_state8 <= ((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_497_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, ap_CS_fsm_state8)
    begin
                ap_condition_497 <= (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8));
    end process;


    ap_condition_pp0_exit_iter0_state41_assign_proc : process(exitcond_fu_877_p2)
    begin
        if ((exitcond_fu_877_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state41 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state46_assign_proc : process(exitcond_flatten_fu_923_p2)
    begin
        if ((exitcond_flatten_fu_923_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state46 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state50_assign_proc : process(tmp_25_fu_975_p2)
    begin
        if ((tmp_25_fu_975_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state50 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state53_assign_proc : process(exitcond_flatten4_fu_1048_p2)
    begin
        if ((exitcond_flatten4_fu_1048_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state53 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state53 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_phi_fu_577_p4_assign_proc : process(exitcond_flatten_reg_1273, ch_reg_573, ap_CS_fsm_pp1_stage0, ch_3_reg_1294, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_1273 = ap_const_lv1_0))) then 
            ap_phi_mux_ch_phi_fu_577_p4 <= ch_3_reg_1294;
        else 
            ap_phi_mux_ch_phi_fu_577_p4 <= ch_reg_573;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_566_p4_assign_proc : process(exitcond_flatten_reg_1273, indvar_flatten_reg_562, ap_CS_fsm_pp1_stage0, indvar_flatten_next_reg_1277, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_1273 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_566_p4 <= indvar_flatten_next_reg_1277;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_566_p4 <= indvar_flatten_reg_562;
        end if; 
    end process;


    ap_phi_mux_outpix_phi_fu_610_p4_assign_proc : process(ap_block_pp3_stage0, exitcond_flatten4_reg_1330, outpix_reg_606, ap_CS_fsm_pp3_stage0, tmp_22_mid2_v_reg_1339, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond_flatten4_reg_1330 = ap_const_lv1_0))) then 
            ap_phi_mux_outpix_phi_fu_610_p4 <= tmp_22_mid2_v_reg_1339;
        else 
            ap_phi_mux_outpix_phi_fu_610_p4 <= outpix_reg_606;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound3_fu_858_p0 <= cast9_fu_850_p1(31 - 1 downto 0);
    bound3_fu_858_p1 <= bound3_fu_858_p10(32 - 1 downto 0);
    bound3_fu_858_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(IFMCH_curr_1_loc_reg_497),63));
    bound3_fu_858_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound3_fu_858_p0) * unsigned(bound3_fu_858_p1), 63));
    bound5_fu_867_p0 <= bound5_fu_867_p00(32 - 1 downto 0);
    bound5_fu_867_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_21_reg_1143),63));
    bound5_fu_867_p1 <= cast9_fu_850_p1(31 - 1 downto 0);
    bound5_fu_867_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound5_fu_867_p0) * unsigned(bound5_fu_867_p1), 63));

    buf_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, buf_addr_5_reg_1344, ap_enable_reg_pp3_iter1, tmp_56_cast_fu_1023_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            buf_address0 <= buf_addr_5_reg_1344;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            buf_address0 <= tmp_56_cast_fu_1023_p1(8 - 1 downto 0);
        else 
            buf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_address1_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_CS_fsm_state9, ap_CS_fsm_pp2_stage0, buf_addr_6_reg_1313, buf_addr_5_reg_1344_pp3_iter1_reg, ap_enable_reg_pp2_iter1, ap_CS_fsm_state20, tmp_34_cast_fu_691_p1, tmp_35_cast_fu_707_p1, ap_CS_fsm_state10, tmp_36_cast_fu_717_p1, ap_CS_fsm_state11, tmp_37_cast_fu_727_p1, ap_CS_fsm_state12, tmp_38_cast_fu_737_p1, ap_CS_fsm_state13, tmp_39_cast_fu_747_p1, ap_CS_fsm_state14, tmp_40_cast_fu_757_p1, ap_CS_fsm_state15, tmp_41_cast_fu_767_p1, ap_CS_fsm_state16, tmp_42_cast_fu_777_p1, ap_CS_fsm_state17, tmp_43_cast_fu_787_p1, ap_CS_fsm_state18, tmp_44_cast_fu_797_p1, ap_CS_fsm_state19, tmp_45_cast_fu_807_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            buf_address1 <= buf_addr_5_reg_1344_pp3_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            buf_address1 <= buf_addr_6_reg_1313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            buf_address1 <= tmp_45_cast_fu_807_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            buf_address1 <= tmp_44_cast_fu_797_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            buf_address1 <= tmp_43_cast_fu_787_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_address1 <= tmp_42_cast_fu_777_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            buf_address1 <= tmp_41_cast_fu_767_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            buf_address1 <= tmp_40_cast_fu_757_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buf_address1 <= tmp_39_cast_fu_747_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            buf_address1 <= tmp_38_cast_fu_737_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_address1 <= tmp_37_cast_fu_727_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf_address1 <= tmp_36_cast_fu_717_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_address1 <= tmp_35_cast_fu_707_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_address1 <= tmp_34_cast_fu_691_p1(8 - 1 downto 0);
        else 
            buf_address1 <= "XXXXXXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            buf_ce0 <= ap_const_logic_1;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_ce1_assign_proc : process(ap_enable_reg_pp3_iter2, ap_CS_fsm_state9, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then 
            buf_ce1 <= ap_const_logic_1;
        else 
            buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_d1_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_CS_fsm_state9, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_block_pp2_stage0, tmp_29_fu_1034_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            buf_d1 <= tmp_29_fu_1034_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            buf_d1 <= ap_const_lv32_FFF0BDC1;
        else 
            buf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_we1_assign_proc : process(ap_enable_reg_pp3_iter2, exitcond_flatten4_reg_1330_pp3_iter1_reg, ap_CS_fsm_state9, tmp_17_fu_653_p2, tmp_25_reg_1304, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_25_reg_1304 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_17_fu_653_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0)))) then 
            buf_we1 <= ap_const_logic_1;
        else 
            buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cast9_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_824_p4),63));
    ch_3_fu_952_p2 <= std_logic_vector(unsigned(ch_mid2_reg_1282) + unsigned(ap_const_lv32_1));
    ch_4_fu_981_p2 <= std_logic_vector(unsigned(ch2_reg_584) + unsigned(ap_const_lv5_1));
    ch_mid2_fu_940_p3 <= 
        ap_const_lv32_0 when (exitcond6_fu_934_p2(0) = '1') else 
        ap_phi_mux_ch_phi_fu_577_p4;
    exitcond4_fu_910_p2 <= "1" when (xp_reg_551 = tmp_9_reg_1211) else "0";
    exitcond5_fu_1065_p2 <= "1" when (outch_reg_617 = IFMCH_curr_1_loc_reg_497) else "0";
    exitcond6_fu_934_p2 <= "1" when (ap_phi_mux_ch_phi_fu_577_p4 = IFMCH_curr_1_loc_reg_497) else "0";
    exitcond_flatten3_fu_888_p2 <= "1" when (indvar_flatten3_reg_529 = bound5_reg_1231) else "0";
    exitcond_flatten4_fu_1048_p2 <= "1" when (indvar_flatten4_reg_595 = bound3_reg_1226) else "0";
    exitcond_flatten8_fu_899_p2 <= "1" when (indvar_flatten6_reg_540 = tmp_45_reg_1221) else "0";
    exitcond_flatten_fu_923_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_566_p4 = tmp_44_reg_1216) else "0";
    exitcond_fu_877_p2 <= "1" when (i3_reg_518 = KER_bound_reg_1236) else "0";
    i_fu_882_p2 <= std_logic_vector(unsigned(i3_reg_518) + unsigned(ap_const_lv32_1));

    in_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, exitcond_flatten_reg_1273, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1241)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_reg_1241 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_flatten_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1)))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, exitcond_flatten_reg_1273, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1241, ap_block_pp1_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_1241 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (exitcond_flatten_reg_1273 = ap_const_lv1_0)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next3_fu_893_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_529) + unsigned(ap_const_lv63_1));
    indvar_flatten_next4_fu_1053_p2 <= std_logic_vector(unsigned(indvar_flatten4_reg_595) + unsigned(ap_const_lv63_1));
    indvar_flatten_next7_fu_904_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_540) + unsigned(ap_const_lv32_1));
    indvar_flatten_next_fu_928_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_566_p4) + unsigned(ap_const_lv33_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_659_p2 <= std_logic_vector(unsigned(j_reg_507) + unsigned(ap_const_lv5_1));

    out_V_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_1241, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, exitcond_flatten4_reg_1330_pp3_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_reg_1241 = ap_const_lv1_0)))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_V_din_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_dout, in_V_V_empty_n, out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1241, ap_enable_reg_pp3_iter2, exitcond_flatten4_reg_1330_pp3_iter1_reg, buf_q0, ap_block_pp0_stage0_01001, ap_block_pp3_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0))) then 
            out_V_V_din <= buf_q0;
        elsif (((not(((ap_done_reg = ap_const_logic_1) or (out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_1241 = ap_const_lv1_0)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_V_V_din <= in_V_V_dout;
        else 
            out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, in_V_V_empty_n, out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_1241, ap_enable_reg_pp3_iter2, exitcond_flatten4_reg_1330_pp3_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_flatten4_reg_1330_pp3_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_1241 = ap_const_lv1_0)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((out_V_V_full_n = ap_const_logic_0) or (in_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    outch_2_fu_1137_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(outch_mid2_fu_1071_p3));
    outch_mid2_fu_1071_p3 <= 
        ap_const_lv32_0 when (exitcond5_fu_1065_p2(0) = '1') else 
        outch_reg_617;
    outpix_2_fu_1059_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_outpix_phi_fu_610_p4));
    p_shl1_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_673_p3),9));
    p_shl2_cast_fu_1100_p3 <= (tmp_47_fu_1096_p1 & ap_const_lv4_0);
    p_shl3_cast_fu_1112_p3 <= (tmp_48_fu_1108_p1 & ap_const_lv2_0);
    p_shl5_cast_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1000_p3),9));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_812_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_V_23_reg_1148) * signed(tmp_V_23_reg_1148))), 32));
    tmp2_fu_816_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_V_25_reg_1154) * signed(tmp_V_29_reg_1159))), 32));
    tmp_17_fu_653_p2 <= "1" when (j_reg_507 = ap_const_lv5_14) else "0";
    tmp_18_fu_696_p2 <= "1" when (reg_628 = ap_const_lv32_0) else "0";
    tmp_20_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outch_mid2_fu_1071_p3),64));
    tmp_22_mid2_v_fu_1079_p3 <= 
        outpix_2_fu_1059_p2 when (exitcond5_fu_1065_p2(0) = '1') else 
        ap_phi_mux_outpix_phi_fu_610_p4;
    tmp_23_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_mid2_reg_1282),64));
    tmp_24_fu_957_p2 <= "1" when (signed(acc_q0) > signed(reg_628)) else "0";
    tmp_25_fu_975_p2 <= "1" when (ch2_reg_584 = ap_const_lv5_14) else "0";
    tmp_27_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch2_reg_584),64));
    tmp_28_fu_1028_p2 <= "1" when (signed(buf_q0) > signed(acc_q0)) else "0";
    tmp_29_fu_1034_p3 <= 
        buf_q0 when (tmp_28_fu_1028_p2(0) = '1') else 
        acc_q0;
    tmp_30_fu_665_p3 <= (j_reg_507 & ap_const_lv4_0);
    tmp_31_fu_673_p3 <= (j_reg_507 & ap_const_lv2_0);
    tmp_32_fu_685_p2 <= std_logic_vector(unsigned(tmp_30_fu_665_p3) - unsigned(p_shl1_cast_fu_681_p1));
    tmp_33_fu_702_p2 <= (tmp_32_reg_1182 or ap_const_lv9_1);
        tmp_34_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_685_p2),64));

    tmp_34_fu_712_p2 <= (tmp_32_reg_1182 or ap_const_lv9_2);
    tmp_35_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_702_p2),64));
    tmp_35_fu_722_p2 <= (tmp_32_reg_1182 or ap_const_lv9_3);
    tmp_36_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_712_p2),64));
    tmp_36_fu_732_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_4));
    tmp_37_cast_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_722_p2),64));
    tmp_37_fu_742_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_5));
        tmp_38_cast_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_fu_732_p2),64));

    tmp_38_fu_752_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_6));
        tmp_39_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_742_p2),64));

    tmp_39_fu_762_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_7));
        tmp_40_cast_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_fu_752_p2),64));

    tmp_40_fu_772_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_8));
        tmp_41_cast_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_fu_762_p2),64));

    tmp_41_fu_782_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_9));
        tmp_42_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_fu_772_p2),64));

    tmp_42_fu_792_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_A));
        tmp_43_cast_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_fu_782_p2),64));

    tmp_43_fu_802_p2 <= std_logic_vector(signed(tmp_32_reg_1182) + signed(ap_const_lv9_B));
        tmp_44_cast_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_42_fu_792_p2),64));

    tmp_44_fu_834_p3 <= (IFMCH_curr_1_loc_reg_497 & ap_const_lv1_0);
        tmp_45_cast_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_fu_802_p2),64));

    tmp_45_fu_842_p3 <= (tmp_9_fu_824_p4 & ap_const_lv1_0);
    tmp_46_fu_1087_p1 <= tmp_22_mid2_v_fu_1079_p3(9 - 1 downto 0);
    tmp_47_fu_1096_p1 <= outch_mid2_fu_1071_p3(5 - 1 downto 0);
    tmp_48_fu_1108_p1 <= outch_mid2_fu_1071_p3(7 - 1 downto 0);
    tmp_49_fu_1120_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_1100_p3) - unsigned(p_shl3_cast_fu_1112_p3));
    tmp_50_fu_1126_p2 <= std_logic_vector(unsigned(tmp_46_fu_1087_p1) + unsigned(tmp_49_fu_1120_p2));
    tmp_51_fu_972_p1 <= xp_mid2_reg_1267(9 - 1 downto 0);
        tmp_52_cast_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_fu_1126_p2),64));

    tmp_52_fu_992_p3 <= (ch2_reg_584 & ap_const_lv4_0);
    tmp_53_fu_1000_p3 <= (ch2_reg_584 & ap_const_lv2_0);
    tmp_54_fu_1012_p2 <= std_logic_vector(unsigned(tmp_52_fu_992_p3) - unsigned(p_shl5_cast_fu_1008_p1));
    tmp_55_fu_1018_p2 <= std_logic_vector(unsigned(tmp_54_fu_1012_p2) + unsigned(tmp_51_reg_1299));
        tmp_56_cast_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_55_fu_1018_p2),64));

    tmp_9_fu_824_p4 <= IFMDim_curr_1(31 downto 1);
    tmp_s_fu_632_p2 <= "1" when (reg_628 = ap_const_lv32_1) else "0";
    xp_2_fu_1043_p2 <= std_logic_vector(unsigned(xp_mid2_reg_1267) + unsigned(ap_const_lv31_1));
    xp_mid2_fu_915_p3 <= 
        ap_const_lv31_0 when (exitcond4_fu_910_p2(0) = '1') else 
        xp_reg_551;
end behav;
