-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet is
port (
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TLAST : IN STD_LOGIC;
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TLAST : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of lenet is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.623062,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=240,HLS_SYN_DSP=206,HLS_SYN_FF=15654,HLS_SYN_LUT=26991,HLS_VERSION=2018_3}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal ap_rst_n_inv : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_start : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_done : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_continue : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_idle : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_ap_ready : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_start_out : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_start_write : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_in_stream_TREADY : STD_LOGIC;
    signal AXI_DMA_SLAVE_U0_out_stream_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_SLAVE_U0_out_stream_V_V_write : STD_LOGIC;
    signal SCIG_1_U0_ap_start : STD_LOGIC;
    signal SCIG_1_U0_ap_done : STD_LOGIC;
    signal SCIG_1_U0_ap_continue : STD_LOGIC;
    signal SCIG_1_U0_ap_idle : STD_LOGIC;
    signal SCIG_1_U0_ap_ready : STD_LOGIC;
    signal SCIG_1_U0_start_out : STD_LOGIC;
    signal SCIG_1_U0_start_write : STD_LOGIC;
    signal SCIG_1_U0_in_V_V_read : STD_LOGIC;
    signal SCIG_1_U0_out_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SCIG_1_U0_out_V_V_write : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_start : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_done : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_continue : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_idle : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_ap_ready : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_start_out : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_start_write : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_in_stream_a_V_V_read : STD_LOGIC;
    signal SMM_1u_25u_20u_U0_out_stream_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SMM_1u_25u_20u_U0_out_stream_V_V_write : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_start : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_done : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_continue : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_idle : STD_LOGIC;
    signal pool_2u_20u_24u_U0_ap_ready : STD_LOGIC;
    signal pool_2u_20u_24u_U0_start_out : STD_LOGIC;
    signal pool_2u_20u_24u_U0_start_write : STD_LOGIC;
    signal pool_2u_20u_24u_U0_in_V_V_read : STD_LOGIC;
    signal pool_2u_20u_24u_U0_out_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_2u_20u_24u_U0_out_V_V_write : STD_LOGIC;
    signal SCIG_U0_ap_start : STD_LOGIC;
    signal SCIG_U0_ap_done : STD_LOGIC;
    signal SCIG_U0_ap_continue : STD_LOGIC;
    signal SCIG_U0_ap_idle : STD_LOGIC;
    signal SCIG_U0_ap_ready : STD_LOGIC;
    signal SCIG_U0_start_out : STD_LOGIC;
    signal SCIG_U0_start_write : STD_LOGIC;
    signal SCIG_U0_in_V_V_read : STD_LOGIC;
    signal SCIG_U0_out_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SCIG_U0_out_V_V_write : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_start : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_done : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_continue : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_idle : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_ap_ready : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_start_out : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_start_write : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_in_stream_a_V_V_read : STD_LOGIC;
    signal SMM_1u_500u_50u_U0_out_stream_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal SMM_1u_500u_50u_U0_out_stream_V_V_write : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_start : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_done : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_continue : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_idle : STD_LOGIC;
    signal pool_2u_50u_8u_U0_ap_ready : STD_LOGIC;
    signal pool_2u_50u_8u_U0_start_out : STD_LOGIC;
    signal pool_2u_50u_8u_U0_start_write : STD_LOGIC;
    signal pool_2u_50u_8u_U0_in_V_V_read : STD_LOGIC;
    signal pool_2u_50u_8u_U0_out_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_2u_50u_8u_U0_out_V_V_write : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_start : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_done : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_continue : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_idle : STD_LOGIC;
    signal FC_1u_800u_500u_U0_ap_ready : STD_LOGIC;
    signal FC_1u_800u_500u_U0_start_out : STD_LOGIC;
    signal FC_1u_800u_500u_U0_start_write : STD_LOGIC;
    signal FC_1u_800u_500u_U0_in_stream_a_V_V_read : STD_LOGIC;
    signal FC_1u_800u_500u_U0_out_stream_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FC_1u_800u_500u_U0_out_stream_V_V_write : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_start : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_done : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_continue : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_idle : STD_LOGIC;
    signal FC_1u_500u_10u_U0_ap_ready : STD_LOGIC;
    signal FC_1u_500u_10u_U0_start_out : STD_LOGIC;
    signal FC_1u_500u_10u_U0_start_write : STD_LOGIC;
    signal FC_1u_500u_10u_U0_in_stream_a_V_V_read : STD_LOGIC;
    signal FC_1u_500u_10u_U0_out_stream_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal FC_1u_500u_10u_U0_out_stream_V_V_write : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_start : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_done : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_continue : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_idle : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_ap_ready : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_in_stream_V_V_read : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_out_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_DMA_MASTER_U0_out_stream_TVALID : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_out_stream_TLAST : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal connect_0_V_V_full_n : STD_LOGIC;
    signal connect_0_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_0_V_V_empty_n : STD_LOGIC;
    signal connect_1_V_V_full_n : STD_LOGIC;
    signal connect_1_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_1_V_V_empty_n : STD_LOGIC;
    signal connect_2_V_V_full_n : STD_LOGIC;
    signal connect_2_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_2_V_V_empty_n : STD_LOGIC;
    signal connect_3_V_V_full_n : STD_LOGIC;
    signal connect_3_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_3_V_V_empty_n : STD_LOGIC;
    signal connect_4_V_V_full_n : STD_LOGIC;
    signal connect_4_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_4_V_V_empty_n : STD_LOGIC;
    signal connect_5_V_V_full_n : STD_LOGIC;
    signal connect_5_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_5_V_V_empty_n : STD_LOGIC;
    signal connect_6_V_V_full_n : STD_LOGIC;
    signal connect_6_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_6_V_V_empty_n : STD_LOGIC;
    signal connect_7_V_V_full_n : STD_LOGIC;
    signal connect_7_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_7_V_V_empty_n : STD_LOGIC;
    signal connect_8_V_V_full_n : STD_LOGIC;
    signal connect_8_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal connect_8_V_V_empty_n : STD_LOGIC;
    signal start_for_SCIG_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_1_U0_full_n : STD_LOGIC;
    signal start_for_SCIG_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_1_U0_empty_n : STD_LOGIC;
    signal start_for_SMM_1u_25u_20u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_25u_20u_U0_full_n : STD_LOGIC;
    signal start_for_SMM_1u_25u_20u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_25u_20u_U0_empty_n : STD_LOGIC;
    signal start_for_pool_2u_20u_24u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_20u_24u_U0_full_n : STD_LOGIC;
    signal start_for_pool_2u_20u_24u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_20u_24u_U0_empty_n : STD_LOGIC;
    signal start_for_SCIG_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_U0_full_n : STD_LOGIC;
    signal start_for_SCIG_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SCIG_U0_empty_n : STD_LOGIC;
    signal start_for_SMM_1u_500u_50u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_500u_50u_U0_full_n : STD_LOGIC;
    signal start_for_SMM_1u_500u_50u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SMM_1u_500u_50u_U0_empty_n : STD_LOGIC;
    signal start_for_pool_2u_50u_8u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_50u_8u_U0_full_n : STD_LOGIC;
    signal start_for_pool_2u_50u_8u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_2u_50u_8u_U0_empty_n : STD_LOGIC;
    signal start_for_FC_1u_800u_500u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_800u_500u_U0_full_n : STD_LOGIC;
    signal start_for_FC_1u_800u_500u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_800u_500u_U0_empty_n : STD_LOGIC;
    signal start_for_FC_1u_500u_10u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_500u_10u_U0_full_n : STD_LOGIC;
    signal start_for_FC_1u_500u_10u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_FC_1u_500u_10u_U0_empty_n : STD_LOGIC;
    signal start_for_AXI_DMA_MASTER_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXI_DMA_MASTER_U0_full_n : STD_LOGIC;
    signal start_for_AXI_DMA_MASTER_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AXI_DMA_MASTER_U0_empty_n : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_start_full_n : STD_LOGIC;
    signal AXI_DMA_MASTER_U0_start_write : STD_LOGIC;

    component AXI_DMA_SLAVE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_TVALID : IN STD_LOGIC;
        in_stream_TREADY : OUT STD_LOGIC;
        in_stream_TLAST : IN STD_LOGIC;
        out_stream_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_V_full_n : IN STD_LOGIC;
        out_stream_V_V_write : OUT STD_LOGIC );
    end component;


    component SCIG_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component SMM_1u_25u_20u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_stream_a_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_a_V_V_empty_n : IN STD_LOGIC;
        in_stream_a_V_V_read : OUT STD_LOGIC;
        out_stream_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_V_full_n : IN STD_LOGIC;
        out_stream_V_V_write : OUT STD_LOGIC );
    end component;


    component pool_2u_20u_24u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component SCIG IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component SMM_1u_500u_50u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_stream_a_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_a_V_V_empty_n : IN STD_LOGIC;
        in_stream_a_V_V_read : OUT STD_LOGIC;
        out_stream_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_V_full_n : IN STD_LOGIC;
        out_stream_V_V_write : OUT STD_LOGIC );
    end component;


    component pool_2u_50u_8u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component FC_1u_800u_500u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_stream_a_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_a_V_V_empty_n : IN STD_LOGIC;
        in_stream_a_V_V_read : OUT STD_LOGIC;
        out_stream_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_V_full_n : IN STD_LOGIC;
        out_stream_V_V_write : OUT STD_LOGIC );
    end component;


    component FC_1u_500u_10u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_stream_a_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_a_V_V_empty_n : IN STD_LOGIC;
        in_stream_a_V_V_read : OUT STD_LOGIC;
        out_stream_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_V_V_full_n : IN STD_LOGIC;
        out_stream_V_V_write : OUT STD_LOGIC );
    end component;


    component AXI_DMA_MASTER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_V_V_empty_n : IN STD_LOGIC;
        in_stream_V_V_read : OUT STD_LOGIC;
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_TVALID : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC;
        out_stream_TLAST : OUT STD_LOGIC );
    end component;


    component fifo_w32_d50_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_SCIG_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_SMM_1u_c7D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_pool_2uc8D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_SCIG_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_SMM_1u_c9D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_pool_2udaE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_FC_1u_8dbE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_FC_1u_5dcE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_AXI_DMAddE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    AXI_DMA_SLAVE_U0 : component AXI_DMA_SLAVE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXI_DMA_SLAVE_U0_ap_start,
        start_full_n => start_for_SCIG_1_U0_full_n,
        ap_done => AXI_DMA_SLAVE_U0_ap_done,
        ap_continue => AXI_DMA_SLAVE_U0_ap_continue,
        ap_idle => AXI_DMA_SLAVE_U0_ap_idle,
        ap_ready => AXI_DMA_SLAVE_U0_ap_ready,
        start_out => AXI_DMA_SLAVE_U0_start_out,
        start_write => AXI_DMA_SLAVE_U0_start_write,
        in_stream_TDATA => in_stream_TDATA,
        in_stream_TVALID => in_stream_TVALID,
        in_stream_TREADY => AXI_DMA_SLAVE_U0_in_stream_TREADY,
        in_stream_TLAST => in_stream_TLAST,
        out_stream_V_V_din => AXI_DMA_SLAVE_U0_out_stream_V_V_din,
        out_stream_V_V_full_n => connect_0_V_V_full_n,
        out_stream_V_V_write => AXI_DMA_SLAVE_U0_out_stream_V_V_write);

    SCIG_1_U0 : component SCIG_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SCIG_1_U0_ap_start,
        start_full_n => start_for_SMM_1u_25u_20u_U0_full_n,
        ap_done => SCIG_1_U0_ap_done,
        ap_continue => SCIG_1_U0_ap_continue,
        ap_idle => SCIG_1_U0_ap_idle,
        ap_ready => SCIG_1_U0_ap_ready,
        start_out => SCIG_1_U0_start_out,
        start_write => SCIG_1_U0_start_write,
        in_V_V_dout => connect_0_V_V_dout,
        in_V_V_empty_n => connect_0_V_V_empty_n,
        in_V_V_read => SCIG_1_U0_in_V_V_read,
        out_V_V_din => SCIG_1_U0_out_V_V_din,
        out_V_V_full_n => connect_1_V_V_full_n,
        out_V_V_write => SCIG_1_U0_out_V_V_write);

    SMM_1u_25u_20u_U0 : component SMM_1u_25u_20u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SMM_1u_25u_20u_U0_ap_start,
        start_full_n => start_for_pool_2u_20u_24u_U0_full_n,
        ap_done => SMM_1u_25u_20u_U0_ap_done,
        ap_continue => SMM_1u_25u_20u_U0_ap_continue,
        ap_idle => SMM_1u_25u_20u_U0_ap_idle,
        ap_ready => SMM_1u_25u_20u_U0_ap_ready,
        start_out => SMM_1u_25u_20u_U0_start_out,
        start_write => SMM_1u_25u_20u_U0_start_write,
        in_stream_a_V_V_dout => connect_1_V_V_dout,
        in_stream_a_V_V_empty_n => connect_1_V_V_empty_n,
        in_stream_a_V_V_read => SMM_1u_25u_20u_U0_in_stream_a_V_V_read,
        out_stream_V_V_din => SMM_1u_25u_20u_U0_out_stream_V_V_din,
        out_stream_V_V_full_n => connect_2_V_V_full_n,
        out_stream_V_V_write => SMM_1u_25u_20u_U0_out_stream_V_V_write);

    pool_2u_20u_24u_U0 : component pool_2u_20u_24u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_2u_20u_24u_U0_ap_start,
        start_full_n => start_for_SCIG_U0_full_n,
        ap_done => pool_2u_20u_24u_U0_ap_done,
        ap_continue => pool_2u_20u_24u_U0_ap_continue,
        ap_idle => pool_2u_20u_24u_U0_ap_idle,
        ap_ready => pool_2u_20u_24u_U0_ap_ready,
        start_out => pool_2u_20u_24u_U0_start_out,
        start_write => pool_2u_20u_24u_U0_start_write,
        in_V_V_dout => connect_2_V_V_dout,
        in_V_V_empty_n => connect_2_V_V_empty_n,
        in_V_V_read => pool_2u_20u_24u_U0_in_V_V_read,
        out_V_V_din => pool_2u_20u_24u_U0_out_V_V_din,
        out_V_V_full_n => connect_3_V_V_full_n,
        out_V_V_write => pool_2u_20u_24u_U0_out_V_V_write);

    SCIG_U0 : component SCIG
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SCIG_U0_ap_start,
        start_full_n => start_for_SMM_1u_500u_50u_U0_full_n,
        ap_done => SCIG_U0_ap_done,
        ap_continue => SCIG_U0_ap_continue,
        ap_idle => SCIG_U0_ap_idle,
        ap_ready => SCIG_U0_ap_ready,
        start_out => SCIG_U0_start_out,
        start_write => SCIG_U0_start_write,
        in_V_V_dout => connect_3_V_V_dout,
        in_V_V_empty_n => connect_3_V_V_empty_n,
        in_V_V_read => SCIG_U0_in_V_V_read,
        out_V_V_din => SCIG_U0_out_V_V_din,
        out_V_V_full_n => connect_4_V_V_full_n,
        out_V_V_write => SCIG_U0_out_V_V_write);

    SMM_1u_500u_50u_U0 : component SMM_1u_500u_50u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SMM_1u_500u_50u_U0_ap_start,
        start_full_n => start_for_pool_2u_50u_8u_U0_full_n,
        ap_done => SMM_1u_500u_50u_U0_ap_done,
        ap_continue => SMM_1u_500u_50u_U0_ap_continue,
        ap_idle => SMM_1u_500u_50u_U0_ap_idle,
        ap_ready => SMM_1u_500u_50u_U0_ap_ready,
        start_out => SMM_1u_500u_50u_U0_start_out,
        start_write => SMM_1u_500u_50u_U0_start_write,
        in_stream_a_V_V_dout => connect_4_V_V_dout,
        in_stream_a_V_V_empty_n => connect_4_V_V_empty_n,
        in_stream_a_V_V_read => SMM_1u_500u_50u_U0_in_stream_a_V_V_read,
        out_stream_V_V_din => SMM_1u_500u_50u_U0_out_stream_V_V_din,
        out_stream_V_V_full_n => connect_5_V_V_full_n,
        out_stream_V_V_write => SMM_1u_500u_50u_U0_out_stream_V_V_write);

    pool_2u_50u_8u_U0 : component pool_2u_50u_8u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => pool_2u_50u_8u_U0_ap_start,
        start_full_n => start_for_FC_1u_800u_500u_U0_full_n,
        ap_done => pool_2u_50u_8u_U0_ap_done,
        ap_continue => pool_2u_50u_8u_U0_ap_continue,
        ap_idle => pool_2u_50u_8u_U0_ap_idle,
        ap_ready => pool_2u_50u_8u_U0_ap_ready,
        start_out => pool_2u_50u_8u_U0_start_out,
        start_write => pool_2u_50u_8u_U0_start_write,
        in_V_V_dout => connect_5_V_V_dout,
        in_V_V_empty_n => connect_5_V_V_empty_n,
        in_V_V_read => pool_2u_50u_8u_U0_in_V_V_read,
        out_V_V_din => pool_2u_50u_8u_U0_out_V_V_din,
        out_V_V_full_n => connect_6_V_V_full_n,
        out_V_V_write => pool_2u_50u_8u_U0_out_V_V_write);

    FC_1u_800u_500u_U0 : component FC_1u_800u_500u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FC_1u_800u_500u_U0_ap_start,
        start_full_n => start_for_FC_1u_500u_10u_U0_full_n,
        ap_done => FC_1u_800u_500u_U0_ap_done,
        ap_continue => FC_1u_800u_500u_U0_ap_continue,
        ap_idle => FC_1u_800u_500u_U0_ap_idle,
        ap_ready => FC_1u_800u_500u_U0_ap_ready,
        start_out => FC_1u_800u_500u_U0_start_out,
        start_write => FC_1u_800u_500u_U0_start_write,
        in_stream_a_V_V_dout => connect_6_V_V_dout,
        in_stream_a_V_V_empty_n => connect_6_V_V_empty_n,
        in_stream_a_V_V_read => FC_1u_800u_500u_U0_in_stream_a_V_V_read,
        out_stream_V_V_din => FC_1u_800u_500u_U0_out_stream_V_V_din,
        out_stream_V_V_full_n => connect_7_V_V_full_n,
        out_stream_V_V_write => FC_1u_800u_500u_U0_out_stream_V_V_write);

    FC_1u_500u_10u_U0 : component FC_1u_500u_10u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => FC_1u_500u_10u_U0_ap_start,
        start_full_n => start_for_AXI_DMA_MASTER_U0_full_n,
        ap_done => FC_1u_500u_10u_U0_ap_done,
        ap_continue => FC_1u_500u_10u_U0_ap_continue,
        ap_idle => FC_1u_500u_10u_U0_ap_idle,
        ap_ready => FC_1u_500u_10u_U0_ap_ready,
        start_out => FC_1u_500u_10u_U0_start_out,
        start_write => FC_1u_500u_10u_U0_start_write,
        in_stream_a_V_V_dout => connect_7_V_V_dout,
        in_stream_a_V_V_empty_n => connect_7_V_V_empty_n,
        in_stream_a_V_V_read => FC_1u_500u_10u_U0_in_stream_a_V_V_read,
        out_stream_V_V_din => FC_1u_500u_10u_U0_out_stream_V_V_din,
        out_stream_V_V_full_n => connect_8_V_V_full_n,
        out_stream_V_V_write => FC_1u_500u_10u_U0_out_stream_V_V_write);

    AXI_DMA_MASTER_U0 : component AXI_DMA_MASTER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXI_DMA_MASTER_U0_ap_start,
        ap_done => AXI_DMA_MASTER_U0_ap_done,
        ap_continue => AXI_DMA_MASTER_U0_ap_continue,
        ap_idle => AXI_DMA_MASTER_U0_ap_idle,
        ap_ready => AXI_DMA_MASTER_U0_ap_ready,
        in_stream_V_V_dout => connect_8_V_V_dout,
        in_stream_V_V_empty_n => connect_8_V_V_empty_n,
        in_stream_V_V_read => AXI_DMA_MASTER_U0_in_stream_V_V_read,
        out_stream_TDATA => AXI_DMA_MASTER_U0_out_stream_TDATA,
        out_stream_TVALID => AXI_DMA_MASTER_U0_out_stream_TVALID,
        out_stream_TREADY => out_stream_TREADY,
        out_stream_TLAST => AXI_DMA_MASTER_U0_out_stream_TLAST);

    connect_0_V_V_U : component fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXI_DMA_SLAVE_U0_out_stream_V_V_din,
        if_full_n => connect_0_V_V_full_n,
        if_write => AXI_DMA_SLAVE_U0_out_stream_V_V_write,
        if_dout => connect_0_V_V_dout,
        if_empty_n => connect_0_V_V_empty_n,
        if_read => SCIG_1_U0_in_V_V_read);

    connect_1_V_V_U : component fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SCIG_1_U0_out_V_V_din,
        if_full_n => connect_1_V_V_full_n,
        if_write => SCIG_1_U0_out_V_V_write,
        if_dout => connect_1_V_V_dout,
        if_empty_n => connect_1_V_V_empty_n,
        if_read => SMM_1u_25u_20u_U0_in_stream_a_V_V_read);

    connect_2_V_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SMM_1u_25u_20u_U0_out_stream_V_V_din,
        if_full_n => connect_2_V_V_full_n,
        if_write => SMM_1u_25u_20u_U0_out_stream_V_V_write,
        if_dout => connect_2_V_V_dout,
        if_empty_n => connect_2_V_V_empty_n,
        if_read => pool_2u_20u_24u_U0_in_V_V_read);

    connect_3_V_V_U : component fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2u_20u_24u_U0_out_V_V_din,
        if_full_n => connect_3_V_V_full_n,
        if_write => pool_2u_20u_24u_U0_out_V_V_write,
        if_dout => connect_3_V_V_dout,
        if_empty_n => connect_3_V_V_empty_n,
        if_read => SCIG_U0_in_V_V_read);

    connect_4_V_V_U : component fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SCIG_U0_out_V_V_din,
        if_full_n => connect_4_V_V_full_n,
        if_write => SCIG_U0_out_V_V_write,
        if_dout => connect_4_V_V_dout,
        if_empty_n => connect_4_V_V_empty_n,
        if_read => SMM_1u_500u_50u_U0_in_stream_a_V_V_read);

    connect_5_V_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SMM_1u_500u_50u_U0_out_stream_V_V_din,
        if_full_n => connect_5_V_V_full_n,
        if_write => SMM_1u_500u_50u_U0_out_stream_V_V_write,
        if_dout => connect_5_V_V_dout,
        if_empty_n => connect_5_V_V_empty_n,
        if_read => pool_2u_50u_8u_U0_in_V_V_read);

    connect_6_V_V_U : component fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_2u_50u_8u_U0_out_V_V_din,
        if_full_n => connect_6_V_V_full_n,
        if_write => pool_2u_50u_8u_U0_out_V_V_write,
        if_dout => connect_6_V_V_dout,
        if_empty_n => connect_6_V_V_empty_n,
        if_read => FC_1u_800u_500u_U0_in_stream_a_V_V_read);

    connect_7_V_V_U : component fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FC_1u_800u_500u_U0_out_stream_V_V_din,
        if_full_n => connect_7_V_V_full_n,
        if_write => FC_1u_800u_500u_U0_out_stream_V_V_write,
        if_dout => connect_7_V_V_dout,
        if_empty_n => connect_7_V_V_empty_n,
        if_read => FC_1u_500u_10u_U0_in_stream_a_V_V_read);

    connect_8_V_V_U : component fifo_w32_d50_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => FC_1u_500u_10u_U0_out_stream_V_V_din,
        if_full_n => connect_8_V_V_full_n,
        if_write => FC_1u_500u_10u_U0_out_stream_V_V_write,
        if_dout => connect_8_V_V_dout,
        if_empty_n => connect_8_V_V_empty_n,
        if_read => AXI_DMA_MASTER_U0_in_stream_V_V_read);

    start_for_SCIG_1_U0_U : component start_for_SCIG_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SCIG_1_U0_din,
        if_full_n => start_for_SCIG_1_U0_full_n,
        if_write => AXI_DMA_SLAVE_U0_start_write,
        if_dout => start_for_SCIG_1_U0_dout,
        if_empty_n => start_for_SCIG_1_U0_empty_n,
        if_read => SCIG_1_U0_ap_ready);

    start_for_SMM_1u_c7D_U : component start_for_SMM_1u_c7D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SMM_1u_25u_20u_U0_din,
        if_full_n => start_for_SMM_1u_25u_20u_U0_full_n,
        if_write => SCIG_1_U0_start_write,
        if_dout => start_for_SMM_1u_25u_20u_U0_dout,
        if_empty_n => start_for_SMM_1u_25u_20u_U0_empty_n,
        if_read => SMM_1u_25u_20u_U0_ap_ready);

    start_for_pool_2uc8D_U : component start_for_pool_2uc8D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool_2u_20u_24u_U0_din,
        if_full_n => start_for_pool_2u_20u_24u_U0_full_n,
        if_write => SMM_1u_25u_20u_U0_start_write,
        if_dout => start_for_pool_2u_20u_24u_U0_dout,
        if_empty_n => start_for_pool_2u_20u_24u_U0_empty_n,
        if_read => pool_2u_20u_24u_U0_ap_ready);

    start_for_SCIG_U0_U : component start_for_SCIG_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SCIG_U0_din,
        if_full_n => start_for_SCIG_U0_full_n,
        if_write => pool_2u_20u_24u_U0_start_write,
        if_dout => start_for_SCIG_U0_dout,
        if_empty_n => start_for_SCIG_U0_empty_n,
        if_read => SCIG_U0_ap_ready);

    start_for_SMM_1u_c9D_U : component start_for_SMM_1u_c9D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SMM_1u_500u_50u_U0_din,
        if_full_n => start_for_SMM_1u_500u_50u_U0_full_n,
        if_write => SCIG_U0_start_write,
        if_dout => start_for_SMM_1u_500u_50u_U0_dout,
        if_empty_n => start_for_SMM_1u_500u_50u_U0_empty_n,
        if_read => SMM_1u_500u_50u_U0_ap_ready);

    start_for_pool_2udaE_U : component start_for_pool_2udaE
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool_2u_50u_8u_U0_din,
        if_full_n => start_for_pool_2u_50u_8u_U0_full_n,
        if_write => SMM_1u_500u_50u_U0_start_write,
        if_dout => start_for_pool_2u_50u_8u_U0_dout,
        if_empty_n => start_for_pool_2u_50u_8u_U0_empty_n,
        if_read => pool_2u_50u_8u_U0_ap_ready);

    start_for_FC_1u_8dbE_U : component start_for_FC_1u_8dbE
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FC_1u_800u_500u_U0_din,
        if_full_n => start_for_FC_1u_800u_500u_U0_full_n,
        if_write => pool_2u_50u_8u_U0_start_write,
        if_dout => start_for_FC_1u_800u_500u_U0_dout,
        if_empty_n => start_for_FC_1u_800u_500u_U0_empty_n,
        if_read => FC_1u_800u_500u_U0_ap_ready);

    start_for_FC_1u_5dcE_U : component start_for_FC_1u_5dcE
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_FC_1u_500u_10u_U0_din,
        if_full_n => start_for_FC_1u_500u_10u_U0_full_n,
        if_write => FC_1u_800u_500u_U0_start_write,
        if_dout => start_for_FC_1u_500u_10u_U0_dout,
        if_empty_n => start_for_FC_1u_500u_10u_U0_empty_n,
        if_read => FC_1u_500u_10u_U0_ap_ready);

    start_for_AXI_DMAddE_U : component start_for_AXI_DMAddE
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AXI_DMA_MASTER_U0_din,
        if_full_n => start_for_AXI_DMA_MASTER_U0_full_n,
        if_write => FC_1u_500u_10u_U0_start_write,
        if_dout => start_for_AXI_DMA_MASTER_U0_dout,
        if_empty_n => start_for_AXI_DMA_MASTER_U0_empty_n,
        if_read => AXI_DMA_MASTER_U0_ap_ready);




    AXI_DMA_MASTER_U0_ap_continue <= ap_const_logic_1;
    AXI_DMA_MASTER_U0_ap_start <= start_for_AXI_DMA_MASTER_U0_empty_n;
    AXI_DMA_MASTER_U0_start_full_n <= ap_const_logic_1;
    AXI_DMA_MASTER_U0_start_write <= ap_const_logic_0;
    AXI_DMA_SLAVE_U0_ap_continue <= ap_const_logic_1;
    AXI_DMA_SLAVE_U0_ap_start <= ap_const_logic_1;
    FC_1u_500u_10u_U0_ap_continue <= ap_const_logic_1;
    FC_1u_500u_10u_U0_ap_start <= start_for_FC_1u_500u_10u_U0_empty_n;
    FC_1u_800u_500u_U0_ap_continue <= ap_const_logic_1;
    FC_1u_800u_500u_U0_ap_start <= start_for_FC_1u_800u_500u_U0_empty_n;
    SCIG_1_U0_ap_continue <= ap_const_logic_1;
    SCIG_1_U0_ap_start <= start_for_SCIG_1_U0_empty_n;
    SCIG_U0_ap_continue <= ap_const_logic_1;
    SCIG_U0_ap_start <= start_for_SCIG_U0_empty_n;
    SMM_1u_25u_20u_U0_ap_continue <= ap_const_logic_1;
    SMM_1u_25u_20u_U0_ap_start <= start_for_SMM_1u_25u_20u_U0_empty_n;
    SMM_1u_500u_50u_U0_ap_continue <= ap_const_logic_1;
    SMM_1u_500u_50u_U0_ap_start <= start_for_SMM_1u_500u_50u_U0_empty_n;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    in_stream_TREADY <= AXI_DMA_SLAVE_U0_in_stream_TREADY;
    out_stream_TDATA <= AXI_DMA_MASTER_U0_out_stream_TDATA;
    out_stream_TLAST <= AXI_DMA_MASTER_U0_out_stream_TLAST;
    out_stream_TVALID <= AXI_DMA_MASTER_U0_out_stream_TVALID;
    pool_2u_20u_24u_U0_ap_continue <= ap_const_logic_1;
    pool_2u_20u_24u_U0_ap_start <= start_for_pool_2u_20u_24u_U0_empty_n;
    pool_2u_50u_8u_U0_ap_continue <= ap_const_logic_1;
    pool_2u_50u_8u_U0_ap_start <= start_for_pool_2u_50u_8u_U0_empty_n;
    start_for_AXI_DMA_MASTER_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FC_1u_500u_10u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_FC_1u_800u_500u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SCIG_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SCIG_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SMM_1u_25u_20u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_SMM_1u_500u_50u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool_2u_20u_24u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool_2u_50u_8u_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
